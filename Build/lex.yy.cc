#line 2 "/home/tacioplays/Compiladores/TontoAnalyzer/Build/lex.yy.cc"

#line 4 "/home/tacioplays/Compiladores/TontoAnalyzer/Build/lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 85
#define YY_END_OF_BUFFER 86
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[529] =
    {   0,
        0,    0,   86,   84,    1,    2,   69,   70,   76,   84,
       78,   83,   84,   77,   84,   71,   72,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   67,   68,
        1,    0,   73,    0,   83,    0,    0,   82,   80,   80,
        0,   81,   81,    0,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,    0,   83,    0,   83,    0,   80,

       80,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       75,   74,   80,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   59,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   20,   81,
       81,   81,   81,   81,   24,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   29,   81,   81,   81,   81,   81,

       81,   81,   81,   60,   81,   81,   81,   80,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   63,   81,
       81,   81,   81,   12,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   16,
       81,   81,   81,   81,   28,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   53,
       10,   80,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   54,   81,   81,    5,   81,    4,   81,   81,   81,
       81,   81,   81,   81,   56,   81,   81,   81,   81,   81,

       81,   81,   81,   81,   81,   81,   57,   81,   81,   81,
       81,   81,   81,   80,   81,   81,   58,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   64,
       81,   81,   81,   81,    8,   81,   81,   81,   81,   81,
       81,   81,   81,   62,    3,   81,   81,   14,   23,   81,
       81,   81,   81,   81,   81,   81,   27,   65,   81,   81,
       80,   81,   81,   81,   15,   81,   81,   81,    7,   81,
       81,   81,   46,   61,   81,    6,   81,   81,   81,   81,
       81,   81,   81,   81,   31,   81,   41,   81,   81,   22,
       81,   81,   81,   81,   81,   81,   81,   49,   79,   79,

       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   52,   81,   81,   81,   34,   81,   81,
       66,   18,   13,    9,   81,   81,   81,   81,   81,   81,
       21,   81,   81,   81,   81,   32,   81,   81,   81,   81,
       81,   81,   81,   81,   17,   81,   81,   81,   51,   48,
       81,   33,   40,   50,   81,   81,   81,    0,    0,   81,
       81,   81,   81,   81,   81,   81,   42,   81,   55,   81,
       81,    0,    0,    0,   81,   81,   25,   81,   81,   81,
       37,   81,   81,   26,    0,    0,    0,   81,   38,   47,
       44,   81,   81,   81,    0,    0,    0,   81,   81,   81,

       81,   81,    0,    0,   30,   81,   43,   36,   35,   81,
        0,    0,   81,   81,    0,    0,   81,   39,    0,    0,
       81,    0,    0,   19,   11,    0,   45,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    1,    1,    1,    1,    1,    5,
        6,    7,    8,    1,    9,   10,    1,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,    1,    1,   12,
        1,   13,    1,   14,   15,   16,   17,   18,   19,   16,
       16,   16,   16,   16,   16,   16,   20,   16,   21,   16,
       22,   23,   16,   24,   16,   16,   16,   16,   16,   16,
       25,    1,   26,    1,   27,    1,   28,   29,   30,   31,

       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   54,    1,   55,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[56] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    1,    1,    1,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    1,    1,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    1,    1
    } ;

static const flex_int16_t yy_base[533] =
    {   0,
        0,    0,  296, 2462,   54, 2462, 2462, 2462, 2462,  282,
      277,   49,  268, 2462,   46, 2462, 2462,   51,   52,   54,
       56,   75,   80,   93,   94,   92,   90,  116,  118,  120,
      124,  130,  126,  144,  145,  155,  167,  172, 2462, 2462,
       73,  266, 2462,  265,  104,  193,  264,  258,  178,  192,
       60,  195,  197,   79,  200,  203,  205,  215,  220,  217,
      228,  225,  243,  248,  253,  256,  266,  268,  271,  279,
      281,  296,  299,  309,  317,  311,  328,  334,  336,  342,
      353,  355,  357,  359,  365,  378,  380,  382,  384,  383,
      397,  403,  405,  408,  255,  148,  254,  252,  244,  411,

       89,  423,  150,  434,  435,  436,  437,  438,  448,  449,
      462,  467,  470,  473,  485,  487,  488,  499,  500,  505,
      513,  523,  525,  527,  531,  535,  537,  545,  557,  560,
      568,  570,  572,  580,  592,  595,  597,  598,  600,  618,
      620,  622,  626,  637,  640,  648,  650,  658,  654,  669,
     2462, 2462,  672,  680,  683,  686,  694,  698,  706,  708,
      709,  711,  712,  734,  735,  736,  738,  746,  756,  759,
      761,  771,  779,  782,  783,  785,  804,  802,  796,  807,
      808,  828,  825,  831,  833,  836,  848,  851,  853,  856,
      859,  874,  876,  879,  884,  887,  889,  902,  906,  908,

      910,  920,  923,  931,  933,  943,  944,  954,  955,  966,
      969,  972,  974,  977,  987,  992,  995,  997, 1012, 1014,
     1015, 1017, 1029, 1035, 1041, 1043, 1046, 1056, 1060, 1068,
     1078, 1079, 1080, 1083, 1082, 1093, 1103, 1111, 1116, 1122,
     1124, 1130, 1126, 1136, 1153, 1141, 1154, 1156, 1159, 1164,
     1167, 1178, 1179, 1191, 1192, 1197, 1205, 1210, 1215, 1216,
     1218, 1228, 1230, 1238, 1242, 1243, 1257, 1260, 1261, 1263,
     1274, 1278, 1282, 1286, 1288, 1301, 1305, 1309, 1320, 1326,
     1324, 1328, 1332, 1338, 1346, 1349, 1351, 1357, 1361, 1369,
     1372, 1375, 1383, 1386, 1389, 1403, 1404, 1406, 1414, 1426,

     1427, 1428, 1429, 1440, 1441, 1446, 1451, 1463, 1465, 1469,
     1483, 1487, 1495, 1498, 1500, 1501, 1506, 1520, 1512, 1524,
     1526, 1534, 1539, 1547, 1549, 1552, 1557, 1562, 1572, 1574,
     1575, 1586, 1592, 1594, 1596, 1600, 1606, 1620, 1621, 1623,
     1626, 1631, 1634, 1644, 1648, 1658, 1661, 1663, 1666, 1669,
     1671, 1681, 1684, 1686, 1696, 1704, 1707, 1709, 1719, 1721,
     1724, 1727, 1742, 1744, 1746, 1747, 1750, 1752, 1764, 1769,
     1779, 1782, 1783, 1784, 1794, 1796, 1806, 1807, 1817, 1820,
     1828, 1831, 1843, 1839, 1851, 1853, 1854, 1857, 1865, 1868,
     1871, 1879, 1882, 1885, 1897, 1903, 1907, 1908, 1911, 1921,

     1922, 1926, 1934, 1936, 1940, 1944, 1948, 1958, 1954, 1969,
     1973, 1981, 1987, 1991, 1992, 1995, 2005, 2006, 2016, 2017,
     2018, 2020, 2030, 2035, 2038, 2043, 2048, 2053, 2049, 2061,
     2066, 2071, 2086, 2081, 2089, 2091, 2094, 2099, 2116, 2124,
     2112, 2118, 2135, 2139, 2141, 2143, 2145, 2147, 2149, 2162,
     2166, 2172, 2174, 2180, 2184, 2185, 2195,  221,   43, 2197,
     2203, 2205, 2209, 2217, 2220, 2222, 2223, 2242, 2243, 2245,
     2246,  208,  217,  198, 2256, 2257, 2269, 2270, 2274, 2282,
     2292, 2294, 2295, 2306,  197,  186,  178, 2307, 2309, 2317,
     2320, 2331, 2332, 2335,  169,  177,  166, 2343, 2346, 2354,

     2357, 2365,  158,  143, 2462, 2368, 2378, 2382, 2383, 2396,
      148,  148, 2397, 2400,  119,  132, 2401, 2402,  117,   99,
     2420,   93,   88, 2422, 2462,   81, 2462, 2462,  107,   93,
       78,   74
    } ;

static const flex_int16_t yy_def[533] =
    {   0,
      528,    1,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  529,  528,  528,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  529,  529,
      531,  530,  530,  532,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  528,  528,  528,  528,  528,  529,

      531,  530,  532,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      528,  528,  529,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,

      530,  530,  530,  530,  530,  530,  530,  529,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  529,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,

      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  529,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      529,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  529,  530,

      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  528,  528,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  528,  528,  528,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  528,  528,  528,  530,  530,  530,
      530,  530,  530,  530,  528,  528,  528,  530,  530,  530,

      530,  530,  528,  528,  528,  530,  530,  530,  530,  530,
      528,  528,  530,  530,  528,  528,  530,  530,  528,  528,
      530,  528,  528,  530,  528,  528,  528,    0,  528,  528,
      528,  528
    } ;

static const flex_int16_t yy_nxt[2518] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,    4,   10,   11,
       12,   13,    4,   14,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   16,   17,    4,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   27,   29,
       30,   31,   32,   33,   34,   35,   36,   27,   37,   38,
       27,   27,   27,   39,   40,   41,   48,   41,   44,   45,
      473,   48,   48,   50,   48,  474,   48,   46,   53,   53,
       48,   53,   51,   53,   41,  103,   41,   54,   54,  101,
       54,   58,   54,   62,   55,   48,   51,   63,   59,   48,
       48,   64,   53,   56,   52,   60,   57,   53,   61,   48,

       48,   54,   48,   48,   48,   54,   54,   53,   49,   53,
       53,   53,  527,   44,   45,   51,   54,  526,   54,   54,
       54,   67,   46,   65,   69,   66,   48,   68,   48,   70,
       48,   71,   72,   53,   48,   53,   48,   53,  525,  523,
       48,   53,   54,   53,   54,   74,   54,   53,  522,   75,
       54,   73,   54,   76,   48,   48,   54,   80,   96,   77,
       48,   53,   53,  520,   81,   48,   46,   78,   79,  519,
       54,   54,   53,   83,   82,   84,   54,   48,  516,  515,
       86,   54,   48,  512,   53,   85,   90,   87,   48,   53,
       91,   88,   89,   54,   93,   50,  511,  505,   54,   92,

       97,   97,   48,   98,   51,   48,   94,   48,  504,   50,
       48,  503,   53,   48,   53,   48,  497,   53,   51,  100,
       53,   54,   53,   54,  102,   48,   54,   48,  496,   54,
       48,   54,   53,  104,   53,   48,  495,   53,   48,  487,
      106,   54,   53,   54,  105,   53,   54,  108,  486,  485,
      472,   54,  152,   48,   54,  109,  110,  111,   48,  112,
       53,  107,   98,   48,   98,   53,   48,  151,   48,   54,
       53,  113,   99,   53,   54,   96,   48,   95,   48,   54,
       47,   48,   54,   53,  116,   53,   43,  114,   53,   48,
       42,   48,   54,  115,   54,  528,   53,   54,   53,  528,

      528,  528,  117,  528,  528,   54,   48,   54,  119,   48,
      118,  120,  528,   53,  528,  528,   53,  528,  528,   48,
      528,   48,   54,  122,  121,   54,   53,   48,   53,  528,
      123,  528,  528,  528,   53,   54,  528,   54,   48,  126,
      528,  124,  125,   54,   48,   53,   48,  129,  528,  127,
      528,   53,   48,   53,   54,  128,  130,  528,  132,   53,
       54,  131,   54,   48,  528,   48,  134,   48,   54,   48,
       53,  135,   53,  133,   53,   48,   53,  528,  528,   54,
      137,   54,   53,   54,  139,   54,  136,  528,   48,  140,
       48,   54,   48,   48,   48,   53,  138,   53,  528,   53,

       53,   53,  528,  141,   54,  528,   54,   48,   54,   54,
       54,  143,  145,   48,   53,   48,  528,  528,   48,  528,
       53,   48,   53,   54,  142,   53,  144,  146,   50,   54,
      528,   54,  528,   48,   54,  528,  147,   51,  148,  150,
       53,  528,  528,  149,   48,   48,   48,   48,   48,   54,
      528,   53,   53,   53,   53,   53,  528,  153,   48,   48,
       54,   54,   54,   54,   54,   53,   53,  528,  158,  154,
      528,  528,   48,  156,   54,   54,  157,   48,  155,   53,
       48,  528,  159,   48,   53,  528,  160,   53,   54,  528,
       53,  161,  528,   54,  163,   48,   54,   48,   48,   54,

      528,  164,   53,  528,   53,   53,  528,  162,  165,   48,
       48,   54,  528,   54,   54,   48,   53,   53,  528,  168,
      528,  166,   53,   48,  528,   54,   54,  167,  528,  171,
       53,   54,  169,   48,  528,   48,  172,   48,  170,   54,
       53,   48,   53,  528,   53,   48,  528,   48,   53,   54,
      173,   54,   53,   54,   53,   48,  176,   54,  528,  174,
      528,   54,   53,   54,  175,  179,  528,   48,  528,  528,
       48,   54,  180,  177,   53,  178,  181,   53,   48,  528,
       48,  528,   48,   54,  528,   53,   54,   53,  183,   53,
       48,  528,  182,  528,   54,  528,   54,   53,   54,  528,

      186,  185,   48,  184,  528,   48,   54,   48,   48,   53,
       48,  187,   53,  528,   53,   53,  528,   53,   54,  528,
      528,   54,  528,   54,   54,  528,   54,  191,   48,  188,
       48,  528,   48,  528,  528,   53,   48,   53,  192,   53,
      193,  189,  190,   53,   54,  528,   54,   48,   54,  194,
       48,  195,   54,  528,   53,  197,  199,   53,   48,  528,
       48,  200,  528,   54,   48,   53,   54,   53,   48,  196,
      528,   53,  198,  528,   54,   53,   54,  201,  528,   48,
       54,  204,   48,  528,   54,  202,   53,  203,  528,   50,
       48,  205,  528,   48,  528,   54,   48,   53,   51,  208,

       53,  206,  528,   53,   48,  528,   54,  209,   48,   54,
      528,   53,   54,  207,  210,   53,   48,  211,   48,   48,
       54,   48,   48,   53,   54,   53,   53,  212,   53,   53,
      528,  213,   54,  214,   54,   54,  216,   54,   54,  215,
      528,  528,  528,  528,   48,   48,   48,  217,   48,  528,
      218,   53,   53,   53,  528,   53,   48,  219,  220,  528,
       54,   54,   54,   53,   54,  528,   48,  528,  528,   48,
      528,   48,   54,   53,  528,  528,   53,  223,   53,  528,
      221,   48,   54,  222,  224,   54,  227,   54,   53,   48,
      225,  226,   48,   48,  528,   48,   53,   54,  528,   53,

       53,  528,   53,  528,  528,   54,   48,  228,   54,   54,
      230,   54,   48,   53,   48,  229,  528,   48,   48,   53,
      528,   53,   54,  231,   53,   53,  528,  232,   54,  233,
       54,  234,  528,   54,   54,   48,  528,  235,   48,  236,
      528,   48,   53,   48,  528,   53,   48,  528,   53,  528,
       53,   54,  237,   53,   54,  238,  239,   54,   48,   54,
      528,   48,   54,   48,  528,   53,   48,  241,   53,   48,
       53,  240,  528,   53,   54,  528,   53,   54,  243,   54,
      528,  528,   54,  528,   48,   54,   48,  245,  244,   48,
      246,   53,  242,   53,   48,  528,   53,   48,  528,   48,

       54,   53,   54,  250,   53,   54,   53,  528,  528,  247,
       54,  249,   48,   54,  251,   54,   48,  528,   48,   53,
       48,  528,  248,   53,  252,   53,  528,   53,   54,  528,
       48,  528,   54,   48,   54,  528,   54,   53,  528,  528,
       53,   48,  253,   48,  528,  256,   54,  254,   53,   54,
       53,  257,  528,   48,   48,  255,  528,   54,  258,   54,
       53,   53,  528,  528,   48,   48,  259,  528,  528,   54,
       54,   50,   53,  528,  260,  261,   48,  262,  263,   48,
       51,   54,   48,   53,   48,  528,   53,   48,  528,   53,
      528,   53,   54,  528,   53,   54,  265,   48,   54,  264,

       54,  528,   48,   54,   53,   48,  268,   48,  528,   53,
      528,  528,   53,   54,   53,  267,  269,  266,   54,  528,
      528,   54,   48,   54,   48,   48,  271,   48,  528,   53,
      528,   53,   53,  528,   53,  528,  270,  272,   54,   48,
       54,   54,  273,   54,  277,   48,   53,  274,  278,  275,
      276,   48,   53,   48,  528,   54,   48,  528,   53,  528,
       53,   54,  528,   53,  279,  528,   48,   54,  528,   54,
       48,  528,   54,   53,  528,  528,  528,   53,   48,  528,
      528,  280,   54,  281,  282,   53,   54,  284,   48,   48,
       48,  283,   48,   48,   54,   53,   53,   53,  528,   53,

       53,  528,  528,   48,   54,   54,   54,  528,   54,   54,
       53,  288,  528,   48,  285,  528,  528,  528,  528,   54,
       53,   48,  286,  289,  291,  287,   48,  290,   53,   54,
      528,  528,   48,   53,   48,  528,   48,   54,  292,   53,
       48,   53,   54,   53,  528,  528,   48,   53,   54,  528,
       54,   48,   54,   53,  528,  528,   54,  293,   53,  297,
      294,  296,   54,   48,   48,  298,   48,   54,  295,   48,
       53,   53,  299,   53,   48,  528,   53,   48,  528,   54,
       54,   53,   54,  528,   53,   54,  300,  528,   48,   48,
       54,  302,  528,   54,  303,   53,   53,  528,  528,  304,

      301,   48,   48,  528,   54,   54,  528,   48,   53,   53,
      306,  528,  307,  305,   53,   48,  528,   54,   54,  309,
       48,  528,   53,   54,  528,   48,   48,   53,   48,  308,
      528,   54,   53,   53,  528,   53,   54,  310,   48,  528,
       48,   54,   54,  528,   54,   50,  313,   53,   48,  528,
      312,  311,   48,   48,   51,   53,   54,  318,  528,   53,
       53,  528,  528,  528,   54,  316,  528,   48,   54,   54,
       48,   48,  528,   48,   53,  528,  528,   53,   53,  314,
       53,  315,  317,   54,   48,  528,   54,   54,   48,   54,
      322,   53,   48,  528,  528,   53,   48,  528,   48,   53,

       54,  319,  528,   53,   54,   53,  320,  321,   54,  324,
      528,   48,   54,  528,   54,   48,  528,  325,   53,   48,
      323,  528,   53,  528,  528,  528,   53,   54,  528,  327,
       48,   54,  326,  528,   48,   54,   48,   53,   48,  330,
      328,   53,   48,   53,  528,   53,   54,  528,   48,   53,
       54,  329,   54,  332,   54,   53,   48,  528,   54,   48,
      331,   48,  528,   53,   54,  528,   53,   48,   53,  333,
      528,   48,   54,  334,   53,   54,  335,   54,   53,   48,
      528,  528,   48,   54,  336,   48,   53,   54,  528,   53,
      528,  528,   53,   48,  528,   54,   48,  337,   54,   48,

       53,   54,  341,   53,  339,  528,   53,  338,  528,   54,
      528,  528,   54,   48,   48,   54,   48,  340,  342,  528,
       53,   53,  528,   53,   48,  528,  528,  343,  528,   54,
       54,   53,   54,  344,  528,  345,   48,   48,   48,   48,
       54,  346,  528,   53,   53,   53,   53,  528,  528,  347,
       48,   48,   54,   54,   54,   54,   48,   53,   53,  528,
      528,   48,  528,   53,  528,  528,   54,   54,   53,  351,
      528,  348,   54,   48,  350,   48,  353,   54,  349,   48,
       53,  354,   53,  528,  528,  528,   53,  528,  528,   54,
      352,   54,  528,   48,  528,   54,  528,   48,  528,  357,

       53,  355,  528,  356,   53,   48,  528,  528,   48,   54,
       48,   48,   53,   54,  359,   50,   48,   53,   53,  528,
      528,   54,   48,   53,   51,  528,   54,   54,  358,   53,
       48,  528,   54,  528,   48,  528,   48,   53,   54,  360,
      361,   53,  362,   53,   48,  528,   54,  363,  364,   48,
       54,   53,   54,  528,  528,  366,   53,   48,  528,   48,
       54,  367,   48,  365,   53,   54,   53,   48,  528,   53,
      369,  528,   48,   54,   53,   54,  528,  528,   54,   53,
      368,  528,   48,   54,   48,   48,  528,  370,   54,   53,
      528,   53,   53,  374,  528,  371,   48,  373,   54,  372,

       54,   54,   48,   53,   48,  528,   48,  375,  528,   53,
       48,   53,   54,   53,  528,  528,   48,   53,   54,  528,
       54,  376,   54,   53,  377,  528,   54,  378,  528,  380,
       48,   48,   54,   48,  379,  381,   48,   53,   53,  528,
       53,   48,  528,   53,   48,  528,   54,   54,   53,   54,
      383,   53,   54,  528,   48,  382,  528,   54,   48,  528,
       54,   53,  528,  528,  385,   53,  387,  528,   48,  384,
       54,   48,  386,   48,   54,   53,   48,  528,   53,   48,
       53,   48,  528,   53,   54,  528,   53,   54,   53,   54,
      528,   48,   54,  528,   48,   54,   48,   54,   53,  528,

      388,   53,  391,   53,  528,  528,   48,   54,  528,  528,
       54,  389,   54,   53,   48,  394,  392,   48,  528,   48,
      390,   53,   54,  528,   53,  393,   53,  395,  528,   48,
       54,   48,  528,   54,   48,   54,   53,   48,   53,  396,
      528,   50,  528,  528,   53,   54,  528,   54,  528,  528,
       51,  528,   48,   54,   48,  399,   48,   48,  400,   53,
       48,   53,   48,   53,   53,  397,  398,   53,   54,   53,
       54,  528,   54,   54,   48,  528,   54,  401,   54,   48,
      528,   53,  528,  528,  528,  402,   53,  405,  528,   48,
       54,  403,   48,   48,   48,   54,   53,  528,  404,   53,

       53,   53,  528,  528,   48,   54,   48,  528,   54,   54,
       54,   53,  528,   53,  407,  406,   48,   48,  528,  528,
       54,  528,   54,  410,   53,  528,  528,   48,  408,  528,
       48,  528,   54,   54,   53,  409,  411,   53,   48,  528,
      528,   48,  528,   54,  412,   53,   54,  413,   53,   48,
      528,  528,  528,   48,   54,  528,   53,   54,  415,  414,
       53,   48,  416,   48,   48,   54,  417,   48,   53,   54,
       53,   53,  528,  528,   53,   48,  528,   54,   48,   54,
       54,   48,   53,   54,  419,   53,  528,  528,   53,   48,
      528,   54,   48,  418,   54,   48,   53,   54,  528,   53,

      420,  528,   53,  528,  528,   54,  528,   48,   54,  528,
      528,   54,  528,   48,   53,  528,  421,   48,   48,  422,
       53,   48,  423,   54,   53,   53,  425,  528,   50,   54,
      424,   48,   48,   54,   54,  528,   48,   51,   53,   53,
      528,  528,  427,   53,   48,  528,   48,   54,   54,  426,
       48,   53,   54,   53,   48,  528,  528,   53,   48,  528,
       54,   53,   54,  428,   48,   53,   54,  431,   48,  430,
       54,   53,  528,  429,   54,   53,  528,  528,  528,   48,
       54,  528,  528,   48,   54,  433,   53,  528,  432,  434,
       53,   48,  438,  435,  436,   54,  102,   48,   53,   54,

      437,   48,   48,  528,   53,   48,  528,   54,   53,   53,
      528,  528,   53,   54,  528,   48,   48,   54,   54,  439,
      528,   54,   53,   53,  528,  440,   48,   48,   48,  528,
       48,   54,   54,   53,   53,   53,  442,   53,  441,  528,
       48,  528,   54,   54,   54,   48,   54,   53,   48,  528,
      528,  443,   53,   48,  528,   53,   54,  445,   48,   48,
       53,   54,  444,   48,   54,   53,   53,  528,  528,   54,
       53,   48,  528,  528,   54,   54,   48,  528,   53,   54,
      528,   48,  528,   53,  446,  528,  528,   54,   53,  448,
      528,   48,   54,  449,  447,  450,   48,   54,   53,   48,

      528,   48,  452,   53,   48,  528,   53,   54,   53,   48,
      528,   53,   54,  451,  528,   54,   53,   54,  453,  528,
       54,  454,   48,  528,  458,   54,   48,  459,   48,   53,
      455,  528,  528,   53,   48,   53,  456,  528,   54,  528,
      457,   53,   54,  528,   54,   48,  460,  461,  462,   48,
       54,   48,   53,   48,  528,   48,   53,   48,   53,   48,
       53,   54,   53,  528,   53,   54,   53,   54,  528,   54,
      463,   54,   48,   54,  464,   54,   48,  528,  465,   53,
      528,  528,   48,   53,   48,  528,  466,  467,   54,   53,
       48,   53,   54,  468,   48,   48,  528,   53,   54,  528,

       54,   53,   53,  528,  528,   48,   54,   48,  528,  528,
       54,   54,   53,   48,   53,   48,  470,  528,  528,   48,
       53,   54,   53,   54,  469,  471,   53,   48,  528,   54,
       48,   54,   48,   48,   53,   54,  477,   53,  475,   53,
       53,  528,  528,   54,  476,  528,   54,  528,   54,   54,
      478,  528,   48,   48,  481,   48,   48,  528,  479,   53,
       53,  480,   53,   53,  528,  528,   48,   48,   54,   54,
      528,   54,   54,   53,   53,  528,  528,  484,  528,   48,
       48,  528,   54,   54,   48,  483,   53,   53,  482,  528,
      528,   53,   48,  528,  488,   54,   54,  489,  528,   53,

       54,  528,   48,  528,   48,   48,  528,  528,   54,   53,
      490,   53,   53,  528,  491,  528,   48,   48,   54,   48,
       54,   54,  492,   53,   53,  494,   53,   48,  528,  493,
       48,  528,   54,   54,   53,   54,  528,   53,  498,  528,
      528,   48,   48,   54,  528,   48,   54,  499,   53,   53,
      528,  500,   53,   48,  528,  528,   48,   54,   54,  528,
       53,   54,  506,   53,   48,  528,  502,   48,  528,   54,
      528,   53,   54,  501,   53,   48,  528,  528,   48,  528,
       54,  528,   53,   54,  507,   53,  508,  528,   48,  528,
      528,   54,   48,   48,   54,   53,  528,  509,  528,   53,

       53,  528,  528,  513,   54,  510,   48,   48,   54,   54,
       48,   48,   48,   53,   53,  528,  528,   53,   53,   53,
      528,  528,   54,   54,  528,  514,   54,   54,   54,  528,
       48,  518,   48,  528,  528,  528,  521,   53,  528,   53,
      528,  528,  528,  528,  528,  528,   54,  517,   54,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      524,    3,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,

      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528
    } ;

static const flex_int16_t yy_chk[2518] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    5,   15,    5,   12,   12,
      459,   18,   19,   15,   20,  459,   21,   12,   18,   19,
       51,   20,   15,   21,   41,  532,   41,   18,   19,  531,
       20,   20,   21,   21,   18,   22,   51,   21,   20,   54,
       23,   21,   22,   19,  530,   20,   19,   23,   20,  101,

       27,   22,   26,   24,   25,   54,   23,   27,  529,   26,
       24,   25,  526,   45,   45,  101,   27,  523,   26,   24,
       25,   23,   45,   22,   24,   22,   28,   23,   29,   25,
       30,   26,   26,   28,   31,   29,   33,   30,  522,  520,
       32,   31,   28,   33,   29,   29,   30,   32,  519,   29,
       31,   28,   33,   29,   34,   35,   32,   32,   96,   29,
      103,   34,   35,  516,   32,   36,   96,   30,   31,  515,
       34,   35,   36,   33,   32,   34,  103,   37,  512,  511,
       35,   36,   38,  504,   37,   34,   36,   35,   49,   38,
       36,   35,   35,   37,   37,   49,  503,  497,   38,   36,

       46,   46,   50,   46,   49,   52,   38,   53,  496,   50,
       55,  495,   52,   56,   53,   57,  487,   55,   50,   50,
       56,   52,   57,   53,   53,   58,   55,   60,  486,   56,
       59,   57,   58,   55,   60,   62,  485,   59,   61,  474,
       57,   58,   62,   60,   56,   61,   59,   59,  473,  472,
      458,   62,   99,   63,   61,   60,   60,   60,   64,   61,
       63,   58,   98,   65,   97,   64,   66,   95,   48,   63,
       65,   62,   47,   66,   64,   44,   67,   42,   68,   65,
       13,   69,   66,   67,   65,   68,   11,   63,   69,   70,
       10,   71,   67,   64,   68,    3,   70,   69,   71,    0,

        0,    0,   66,    0,    0,   70,   72,   71,   68,   73,
       67,   69,    0,   72,    0,    0,   73,    0,    0,   74,
        0,   76,   72,   71,   70,   73,   74,   75,   76,    0,
       72,    0,    0,    0,   75,   74,    0,   76,   77,   73,
        0,   72,   72,   75,   78,   77,   79,   75,    0,   74,
        0,   78,   80,   79,   77,   74,   75,    0,   77,   80,
       78,   76,   79,   81,    0,   82,   79,   83,   80,   84,
       81,   80,   82,   78,   83,   85,   84,    0,    0,   81,
       81,   82,   85,   83,   83,   84,   80,    0,   86,   84,
       87,   85,   88,   90,   89,   86,   82,   87,    0,   88,

       90,   89,    0,   85,   86,    0,   87,   91,   88,   90,
       89,   87,   89,   92,   91,   93,    0,    0,   94,    0,
       92,  100,   93,   91,   86,   94,   88,   90,  100,   92,
        0,   93,    0,  102,   94,    0,   91,  100,   92,   94,
      102,    0,    0,   93,  104,  105,  106,  107,  108,  102,
        0,  104,  105,  106,  107,  108,    0,  100,  109,  110,
      104,  105,  106,  107,  108,  109,  110,    0,  107,  102,
        0,    0,  111,  105,  109,  110,  106,  112,  104,  111,
      113,    0,  108,  114,  112,    0,  109,  113,  111,    0,
      114,  110,    0,  112,  112,  115,  113,  116,  117,  114,

        0,  113,  115,    0,  116,  117,    0,  111,  114,  118,
      119,  115,    0,  116,  117,  120,  118,  119,    0,  117,
        0,  115,  120,  121,    0,  118,  119,  116,    0,  119,
      121,  120,  117,  122,    0,  123,  120,  124,  118,  121,
      122,  125,  123,    0,  124,  126,    0,  127,  125,  122,
      120,  123,  126,  124,  127,  128,  123,  125,    0,  121,
        0,  126,  128,  127,  122,  126,    0,  129,    0,    0,
      130,  128,  127,  124,  129,  125,  128,  130,  131,    0,
      132,    0,  133,  129,    0,  131,  130,  132,  130,  133,
      134,    0,  129,    0,  131,    0,  132,  134,  133,    0,

      133,  132,  135,  131,    0,  136,  134,  137,  138,  135,
      139,  134,  136,    0,  137,  138,    0,  139,  135,    0,
        0,  136,    0,  137,  138,    0,  139,  138,  140,  135,
      141,    0,  142,    0,    0,  140,  143,  141,  139,  142,
      139,  136,  137,  143,  140,    0,  141,  144,  142,  140,
      145,  141,  143,    0,  144,  143,  145,  145,  146,    0,
      147,  145,    0,  144,  149,  146,  145,  147,  148,  142,
        0,  149,  144,    0,  146,  148,  147,  145,    0,  150,
      149,  147,  153,    0,  148,  145,  150,  146,    0,  153,
      154,  148,    0,  155,    0,  150,  156,  154,  153,  153,

      155,  149,    0,  156,  157,    0,  154,  154,  158,  155,
        0,  157,  156,  150,  155,  158,  159,  156,  160,  161,
      157,  162,  163,  159,  158,  160,  161,  157,  162,  163,
        0,  158,  159,  159,  160,  161,  161,  162,  163,  160,
        0,    0,    0,    0,  164,  165,  166,  161,  167,    0,
      161,  164,  165,  166,    0,  167,  168,  162,  163,    0,
      164,  165,  166,  168,  167,    0,  169,    0,    0,  170,
        0,  171,  168,  169,    0,    0,  170,  166,  171,    0,
      164,  172,  169,  165,  167,  170,  170,  171,  172,  173,
      168,  169,  174,  175,    0,  176,  173,  172,    0,  174,

      175,    0,  176,    0,    0,  173,  179,  171,  174,  175,
      173,  176,  178,  179,  177,  172,    0,  180,  181,  178,
        0,  177,  179,  174,  180,  181,    0,  175,  178,  176,
      177,  177,    0,  180,  181,  183,    0,  178,  182,  180,
        0,  184,  183,  185,    0,  182,  186,    0,  184,    0,
      185,  183,  181,  186,  182,  182,  183,  184,  187,  185,
        0,  188,  186,  189,    0,  187,  190,  186,  188,  191,
      189,  184,    0,  190,  187,    0,  191,  188,  188,  189,
        0,    0,  190,    0,  192,  191,  193,  190,  189,  194,
      191,  192,  187,  193,  195,    0,  194,  196,    0,  197,

      192,  195,  193,  195,  196,  194,  197,    0,    0,  192,
      195,  194,  198,  196,  196,  197,  199,    0,  200,  198,
      201,    0,  193,  199,  197,  200,    0,  201,  198,    0,
      202,    0,  199,  203,  200,    0,  201,  202,    0,    0,
      203,  204,  198,  205,    0,  201,  202,  199,  204,  203,
      205,  202,    0,  206,  207,  200,    0,  204,  203,  205,
      206,  207,    0,    0,  208,  209,  205,    0,    0,  206,
      207,  208,  209,    0,  206,  207,  210,  208,  209,  211,
      208,  209,  212,  210,  213,    0,  211,  214,    0,  212,
        0,  213,  210,    0,  214,  211,  211,  215,  212,  210,

      213,    0,  216,  214,  215,  217,  214,  218,    0,  216,
        0,    0,  217,  215,  218,  213,  215,  212,  216,    0,
        0,  217,  219,  218,  220,  221,  217,  222,    0,  219,
        0,  220,  221,    0,  222,    0,  216,  218,  219,  223,
      220,  221,  218,  222,  222,  224,  223,  219,  222,  220,
      221,  225,  224,  226,    0,  223,  227,    0,  225,    0,
      226,  224,    0,  227,  223,    0,  228,  225,    0,  226,
      229,    0,  227,  228,    0,    0,    0,  229,  230,    0,
        0,  225,  228,  226,  227,  230,  229,  229,  231,  232,
      233,  228,  235,  234,  230,  231,  232,  233,    0,  235,

      234,    0,    0,  236,  231,  232,  233,    0,  235,  234,
      236,  233,    0,  237,  230,    0,    0,    0,    0,  236,
      237,  238,  231,  234,  236,  232,  239,  235,  238,  237,
        0,    0,  240,  239,  241,    0,  243,  238,  237,  240,
      242,  241,  239,  243,    0,    0,  244,  242,  240,    0,
      241,  246,  243,  244,    0,    0,  242,  238,  246,  243,
      239,  242,  244,  245,  247,  244,  248,  246,  241,  249,
      245,  247,  245,  248,  250,    0,  249,  251,    0,  245,
      247,  250,  248,    0,  251,  249,  246,    0,  252,  253,
      250,  248,    0,  251,  249,  252,  253,    0,    0,  250,

      247,  254,  255,    0,  252,  253,    0,  256,  254,  255,
      252,    0,  253,  251,  256,  257,    0,  254,  255,  255,
      258,    0,  257,  256,    0,  259,  260,  258,  261,  254,
        0,  257,  259,  260,    0,  261,  258,  256,  262,    0,
      263,  259,  260,    0,  261,  262,  259,  263,  264,    0,
      258,  257,  265,  266,  262,  264,  263,  266,    0,  265,
      266,    0,    0,    0,  264,  264,    0,  267,  265,  266,
      268,  269,    0,  270,  267,    0,    0,  268,  269,  262,
      270,  263,  265,  267,  271,    0,  268,  269,  272,  270,
      270,  271,  273,    0,    0,  272,  274,    0,  275,  273,

      271,  267,    0,  274,  272,  275,  268,  269,  273,  272,
        0,  276,  274,    0,  275,  277,    0,  273,  276,  278,
      271,    0,  277,    0,    0,    0,  278,  276,    0,  275,
      279,  277,  274,    0,  281,  278,  280,  279,  282,  278,
      276,  281,  283,  280,    0,  282,  279,    0,  284,  283,
      281,  277,  280,  280,  282,  284,  285,    0,  283,  286,
      279,  287,    0,  285,  284,    0,  286,  288,  287,  281,
        0,  289,  285,  283,  288,  286,  284,  287,  289,  290,
        0,    0,  291,  288,  286,  292,  290,  289,    0,  291,
        0,    0,  292,  293,    0,  290,  294,  288,  291,  295,

      293,  292,  292,  294,  290,    0,  295,  289,    0,  293,
        0,    0,  294,  296,  297,  295,  298,  291,  293,    0,
      296,  297,    0,  298,  299,    0,    0,  294,    0,  296,
      297,  299,  298,  296,    0,  297,  300,  301,  302,  303,
      299,  298,    0,  300,  301,  302,  303,    0,    0,  299,
      304,  305,  300,  301,  302,  303,  306,  304,  305,    0,
        0,  307,    0,  306,    0,    0,  304,  305,  307,  303,
        0,  300,  306,  308,  302,  309,  305,  307,  301,  310,
      308,  306,  309,    0,    0,    0,  310,    0,    0,  308,
      304,  309,    0,  311,    0,  310,    0,  312,    0,  310,

      311,  308,    0,  309,  312,  313,    0,    0,  314,  311,
      315,  316,  313,  312,  312,  314,  317,  315,  316,    0,
        0,  313,  319,  317,  314,    0,  315,  316,  311,  319,
      318,    0,  317,    0,  320,    0,  321,  318,  319,  313,
      314,  320,  315,  321,  322,    0,  318,  316,  318,  323,
      320,  322,  321,    0,    0,  320,  323,  324,    0,  325,
      322,  321,  326,  319,  324,  323,  325,  327,    0,  326,
      323,    0,  328,  324,  327,  325,    0,    0,  326,  328,
      322,    0,  329,  327,  330,  331,    0,  324,  328,  329,
        0,  330,  331,  328,    0,  325,  332,  327,  329,  326,

      330,  331,  333,  332,  334,    0,  335,  329,    0,  333,
      336,  334,  332,  335,    0,    0,  337,  336,  333,    0,
      334,  331,  335,  337,  332,    0,  336,  333,    0,  336,
      338,  339,  337,  340,  334,  337,  341,  338,  339,    0,
      340,  342,    0,  341,  343,    0,  338,  339,  342,  340,
      339,  343,  341,    0,  344,  338,    0,  342,  345,    0,
      343,  344,    0,    0,  341,  345,  343,    0,  346,  340,
      344,  347,  342,  348,  345,  346,  349,    0,  347,  350,
      348,  351,    0,  349,  346,    0,  350,  347,  351,  348,
        0,  352,  349,    0,  353,  350,  354,  351,  352,    0,

      346,  353,  351,  354,    0,    0,  355,  352,    0,    0,
      353,  347,  354,  355,  356,  354,  352,  357,    0,  358,
      350,  356,  355,    0,  357,  353,  358,  355,    0,  359,
      356,  360,    0,  357,  361,  358,  359,  362,  360,  356,
        0,  361,    0,    0,  362,  359,    0,  360,    0,    0,
      361,    0,  363,  362,  364,  361,  365,  366,  362,  363,
      367,  364,  368,  365,  366,  359,  360,  367,  363,  368,
      364,    0,  365,  366,  369,    0,  367,  363,  368,  370,
        0,  369,    0,    0,    0,  364,  370,  368,    0,  371,
      369,  366,  372,  373,  374,  370,  371,    0,  367,  372,

      373,  374,    0,    0,  375,  371,  376,    0,  372,  373,
      374,  375,    0,  376,  371,  370,  377,  378,    0,    0,
      375,    0,  376,  377,  378,    0,    0,  379,  372,    0,
      380,    0,  377,  378,  379,  375,  378,  380,  381,    0,
        0,  382,    0,  379,  379,  381,  380,  380,  382,  384,
        0,    0,    0,  383,  381,    0,  384,  382,  382,  381,
      383,  385,  383,  386,  387,  384,  384,  388,  385,  383,
      386,  387,    0,    0,  388,  389,    0,  385,  390,  386,
      387,  391,  389,  388,  388,  390,    0,    0,  391,  392,
        0,  389,  393,  386,  390,  394,  392,  391,    0,  393,

      389,    0,  394,    0,    0,  392,    0,  395,  393,    0,
        0,  394,    0,  396,  395,    0,  391,  397,  398,  392,
      396,  399,  393,  395,  397,  398,  395,    0,  399,  396,
      394,  400,  401,  397,  398,    0,  402,  399,  400,  401,
        0,    0,  397,  402,  403,    0,  404,  400,  401,  396,
      405,  403,  402,  404,  406,    0,    0,  405,  407,    0,
      403,  406,  404,  401,  409,  407,  405,  404,  408,  403,
      406,  409,    0,  402,  407,  408,    0,    0,    0,  410,
      409,    0,    0,  411,  408,  406,  410,    0,  405,  407,
      411,  412,  411,  408,  409,  410,  410,  413,  412,  411,

      410,  414,  415,    0,  413,  416,    0,  412,  414,  415,
        0,    0,  416,  413,    0,  417,  418,  414,  415,  412,
        0,  416,  417,  418,    0,  413,  419,  420,  421,    0,
      422,  417,  418,  419,  420,  421,  416,  422,  415,    0,
      423,    0,  419,  420,  421,  424,  422,  423,  425,    0,
        0,  417,  424,  426,    0,  425,  423,  420,  427,  429,
      426,  424,  419,  428,  425,  427,  429,    0,    0,  426,
      428,  430,    0,    0,  427,  429,  431,    0,  430,  428,
        0,  432,    0,  431,  425,    0,    0,  430,  432,  427,
        0,  434,  431,  428,  426,  429,  433,  432,  434,  435,

        0,  436,  432,  433,  437,    0,  435,  434,  436,  438,
        0,  437,  433,  430,    0,  435,  438,  436,  433,    0,
      437,  434,  441,    0,  439,  438,  439,  440,  442,  441,
      435,    0,    0,  439,  440,  442,  437,    0,  441,    0,
      438,  440,  439,    0,  442,  443,  440,  441,  442,  444,
      440,  445,  443,  446,    0,  447,  444,  448,  445,  449,
      446,  443,  447,    0,  448,  444,  449,  445,    0,  446,
      443,  447,  450,  448,  444,  449,  451,    0,  446,  450,
        0,    0,  452,  451,  453,    0,  447,  448,  450,  452,
      454,  453,  451,  451,  455,  456,    0,  454,  452,    0,

      453,  455,  456,    0,    0,  457,  454,  460,    0,    0,
      455,  456,  457,  461,  460,  462,  456,    0,    0,  463,
      461,  457,  462,  460,  455,  457,  463,  464,    0,  461,
      465,  462,  466,  467,  464,  463,  462,  465,  460,  466,
      467,    0,    0,  464,  461,    0,  465,    0,  466,  467,
      463,    0,  468,  469,  466,  470,  471,    0,  464,  468,
      469,  465,  470,  471,    0,    0,  475,  476,  468,  469,
        0,  470,  471,  475,  476,    0,    0,  471,    0,  477,
      478,    0,  475,  476,  479,  470,  477,  478,  468,    0,
        0,  479,  480,    0,  475,  477,  478,  476,    0,  480,

      479,    0,  481,    0,  482,  483,    0,    0,  480,  481,
      478,  482,  483,    0,  479,    0,  484,  488,  481,  489,
      482,  483,  480,  484,  488,  483,  489,  490,    0,  482,
      491,    0,  484,  488,  490,  489,    0,  491,  488,    0,
        0,  492,  493,  490,    0,  494,  491,  491,  492,  493,
        0,  492,  494,  498,    0,    0,  499,  492,  493,    0,
      498,  494,  498,  499,  500,    0,  494,  501,    0,  498,
        0,  500,  499,  493,  501,  502,    0,    0,  506,    0,
      500,    0,  502,  501,  499,  506,  500,    0,  507,    0,
        0,  502,  508,  509,  506,  507,    0,  501,    0,  508,

      509,    0,    0,  506,  507,  502,  510,  513,  508,  509,
      514,  517,  518,  510,  513,    0,    0,  514,  517,  518,
        0,    0,  510,  513,    0,  510,  514,  517,  518,    0,
      521,  514,  524,    0,    0,    0,  517,  521,    0,  524,
        0,    0,    0,    0,    0,    0,  521,  513,  524,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      521,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,

      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[86] =
    {   0,
0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lexer.l"
#line 2 "lexer.l"
/* Reconhecedor de uma linguagem simplificada */
#include <iostream>
#include "tokens.h"
using std::cout;

/* Variaveis globais para linha e coluna */
extern int yylineno;
int column = 1;

/* Função que atualiza a coluna */
void update_column(yyFlexLexer& scanner) {
    column += scanner.YYLeng();
}
#line 1169 "/home/tacioplays/Compiladores/TontoAnalyzer/Build/lex.yy.cc"
/* Definições Regulares */
/*string	{letras}({letras}|{digito})*  */
/* Nome da Classe */
/* Nome da Relação */
/* Nome da Instancia */
/* Nome Novos Tipos */
/* Regras de Tradução */
#line 1177 "/home/tacioplays/Compiladores/TontoAnalyzer/Build/lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 43 "lexer.l"

#line 1311 "/home/tacioplays/Compiladores/TontoAnalyzer/Build/lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 529 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2462 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 44 "lexer.l"
{ update_column(*this);}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 45 "lexer.l"
{ column = 1;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 47 "lexer.l"
{ update_column(*this); return T_PACKAGE; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 48 "lexer.l"
{ update_column(*this); return T_IMPORT; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 49 "lexer.l"
{ update_column(*this); return T_GENSET; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 50 "lexer.l"
{ update_column(*this); return T_DISJOINT; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 51 "lexer.l"
{ update_column(*this); return T_COMPLETE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 52 "lexer.l"
{ update_column(*this); return T_GENERAL; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 53 "lexer.l"
{ update_column(*this); return T_SPECIFICS; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 54 "lexer.l"
{ update_column(*this); return T_WHERE; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 55 "lexer.l"
{update_column(*this); return T_FUNCTIONAL_COMPLEXES; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "lexer.l"
{ update_column(*this); return T_EVENT; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 59 "lexer.l"
{ update_column(*this); return T_SITUATION; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 60 "lexer.l"
{ update_column(*this); return T_PROCESS; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 61 "lexer.l"
{ update_column(*this); return T_CATEGORY; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 62 "lexer.l"
{ update_column(*this); return T_MIXIN; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 63 "lexer.l"
{ update_column(*this); return T_PHASEMIXIN; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 64 "lexer.l"
{ update_column(*this); return T_ROLEMIXIN; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 65 "lexer.l"
{ update_column(*this); return T_HISTORICALROLEMIXIN; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 66 "lexer.l"
{ update_column(*this); return T_KIND; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 67 "lexer.l"
{ update_column(*this); return T_COLLECTIVE; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 68 "lexer.l"
{ update_column(*this); return T_QUANTITY; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 69 "lexer.l"
{ update_column(*this); return T_QUALITY; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 70 "lexer.l"
{ update_column(*this); return T_MODE; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 71 "lexer.l"
{ update_column(*this); return T_INTRINSICMODE; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 72 "lexer.l"
{ update_column(*this); return T_EXTRINSICMODE; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 73 "lexer.l"
{ update_column(*this); return T_SUBKIND; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 74 "lexer.l"
{ update_column(*this); return T_PHASE; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 75 "lexer.l"
{ update_column(*this); return T_ROLE; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 76 "lexer.l"
{ update_column(*this); return T_HISTORICALROLE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 79 "lexer.l"
{ update_column(*this); return T_MATERIAL; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 80 "lexer.l"
{ update_column(*this); return T_DERIVATION; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 81 "lexer.l"
{ update_column(*this); return T_COMPARATIVE; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 82 "lexer.l"
{ update_column(*this); return T_MEDIATION; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 83 "lexer.l"
{ update_column(*this); return T_CHARACTERIZATION; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 84 "lexer.l"
{ update_column(*this); return T_SUBCOLLECTIONOF; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 85 "lexer.l"
{ update_column(*this); return T_SUBQUALITYOF; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 86 "lexer.l"
{ update_column(*this); return T_INSTANTIATION; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 87 "lexer.l"
{ update_column(*this); return T_EXTERNALDEPENDENCE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 88 "lexer.l"
{ update_column(*this); return T_COMPONENTOF; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 89 "lexer.l"
{ update_column(*this); return T_MEMBEROF; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 90 "lexer.l"
{ update_column(*this); return T_TERMINATION; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 91 "lexer.l"
{ update_column(*this); return T_PARTICIPATIONAL; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 92 "lexer.l"
{ update_column(*this); return T_PARTICIPATION; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 93 "lexer.l"
{ update_column(*this); return T_HISTORICALDEPENDENCE; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 94 "lexer.l"
{ update_column(*this); return T_CREATION; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 95 "lexer.l"
{ update_column(*this); return T_MANIFESTATION; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 96 "lexer.l"
{ update_column(*this); return T_BRINGSABOUT; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 97 "lexer.l"
{ update_column(*this); return T_TRIGGERS; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 98 "lexer.l"
{ update_column(*this); return T_COMPOSITION; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 99 "lexer.l"
{ update_column(*this); return T_AGGREGATION; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 100 "lexer.l"
{ update_column(*this); return T_INHERENCE; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 101 "lexer.l"
{ update_column(*this); return T_VALUE; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 102 "lexer.l"
{ update_column(*this); return T_FORMAL; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 103 "lexer.l"
{ update_column(*this); return T_CONSTITUTION; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 106 "lexer.l"
{ update_column(*this); return T_NUMBER_TYPE; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 107 "lexer.l"
{ update_column(*this); return T_STRING_TYPE; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 108 "lexer.l"
{ update_column(*this); return T_BOOLEAN_TYPE; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 109 "lexer.l"
{ update_column(*this); return T_DATE_TYPE; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 110 "lexer.l"
{ update_column(*this); return T_TIME_TYPE; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 111 "lexer.l"
{ update_column(*this); return T_DATETIME_TYPE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 114 "lexer.l"
{ update_column(*this); return T_ORDERED; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 115 "lexer.l"
{ update_column(*this); return T_CONST; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 116 "lexer.l"
{ update_column(*this); return T_DERIVED; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 117 "lexer.l"
{ update_column(*this); return T_SUBSETS; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 118 "lexer.l"
{ update_column(*this); return T_REDEFINES; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 121 "lexer.l"
{ update_column(*this); return T_LBRACE; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 122 "lexer.l"
{ update_column(*this); return T_RBRACE; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 123 "lexer.l"
{ update_column(*this); return T_LPAREN; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 124 "lexer.l"
{ update_column(*this); return T_RPAREN; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 125 "lexer.l"
{ update_column(*this); return T_LBRACK; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 126 "lexer.l"
{ update_column(*this); return T_RBRACK; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 127 "lexer.l"
{ update_column(*this); return T_DOTDOT; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 128 "lexer.l"
{ update_column(*this); return T_DIAMOND_ARROW; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 129 "lexer.l"
{ update_column(*this); return T_ARROW_DIAMOND; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 130 "lexer.l"
{ update_column(*this); return T_ASTERISK; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 131 "lexer.l"
{ update_column(*this); return T_AT; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 132 "lexer.l"
{ update_column(*this); return T_DOT; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 135 "lexer.l"
{ update_column(*this); return T_NEW_DATA_TYPE; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 136 "lexer.l"
{ update_column(*this); return T_CLASS_NAME; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 137 "lexer.l"
{ update_column(*this); return T_RELATION_NAME; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 138 "lexer.l"
{ update_column(*this); return T_INSTANCE_NAME; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 139 "lexer.l"
{ update_column(*this); return T_NUMBER; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 142 "lexer.l"
{
                    // Imprime a mensagem de erro 
                    cout << "Erro na linha " << yylineno << ", coluna " << column
                         << ": Token inválido '" << YYText() << "'\n";
                    // Sugestão de tratamento
                    cout << "  Sugestão: Verifique se o caractere é permitido pela linguagem TONTO ou se há erro na formação de um nome (ex: classe iniciando com minúscula, violação de convenção de nome, caractere especial inesperado).\n";
                    update_column(*this); 
                    return T_INVALID; 
                }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 151 "lexer.l"
ECHO;
	YY_BREAK
#line 1812 "/home/tacioplays/Compiladores/TontoAnalyzer/Build/lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 529 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 529 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 528);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 151 "lexer.l"


/* nenhuma função auxiliar é necessária */


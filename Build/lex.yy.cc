#line 2 "/home/tacioplays/Compiladores/TontoAnalyzer/Build/lex.yy.cc"

#line 4 "/home/tacioplays/Compiladores/TontoAnalyzer/Build/lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 84
#define YY_END_OF_BUFFER 85
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[510] =
    {   0,
        0,    0,   85,   83,    1,    2,   68,   69,   75,   83,
       77,   82,   83,   76,   83,   70,   71,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   66,   67,
        1,    0,   72,    0,   82,    0,    0,   81,   79,   79,
        0,   80,   80,    0,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,    0,   82,    0,   82,    0,   79,   79,

       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   74,   73,
       79,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   58,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   19,   80,   80,   80,   80,
       80,   23,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   28,   80,   80,   80,   80,   80,   80,   80,   80,

       59,   80,   80,   80,   79,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   62,   80,   80,   80,   80,
       11,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   15,   80,   80,   80,   80,
       27,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   52,   10,   79,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   53,   80,    5,
       80,    4,   80,   80,   80,   80,   80,   80,   80,   55,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,

       80,   56,   80,   80,   80,   80,   80,   80,   79,   80,
       80,   57,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   63,   80,   80,   80,    8,   80,
       80,   80,   80,   80,   80,   80,   80,   61,    3,   80,
       80,   13,   22,   80,   80,   80,   80,   80,   80,   80,
       26,   64,   80,   80,   79,   80,   80,   80,   14,   80,
       80,   80,    7,   80,   80,   80,   45,   60,   80,    6,
       80,   80,   80,   80,   80,   80,   80,   30,   80,   40,
       80,   80,   21,   80,   80,   80,   80,   80,   80,   80,
       48,   78,   78,   80,   80,   80,   80,   80,   80,   80,

       80,   80,   80,   80,   80,   51,   80,   80,   80,   33,
       80,   80,   65,   17,   12,    9,   80,   80,   80,   80,
       80,   80,   20,   80,   80,   80,   80,   31,   80,   80,
       80,   80,   80,   80,   80,   16,   80,   80,   80,   50,
       47,   80,   32,   39,   49,   80,   80,   80,    0,   80,
       80,   80,   80,   80,   80,   80,   41,   80,   54,   80,
       80,    0,    0,   80,   80,   24,   80,   80,   80,   36,
       80,   80,   25,    0,    0,   80,   37,   46,   43,   80,
       80,   80,    0,    0,   80,   80,   80,   80,   80,    0,
       29,   80,   42,   35,   34,   80,    0,   80,   80,    0,

       80,   38,    0,   80,    0,   18,    0,   44,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    1,    1,    1,    1,    1,    5,
        6,    7,    8,    1,    9,   10,    1,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,    1,    1,   12,
        1,   13,    1,   14,   15,   16,   17,   18,   19,   16,
       16,   16,   16,   16,   16,   16,   20,   16,   21,   16,
       22,   23,   16,   24,   16,   16,   16,   16,   16,   16,
       25,    1,   26,    1,   27,    1,   28,   29,   30,   31,

       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   54,    1,   55,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[56] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    1,    1,    1,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    1,    1,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    1,    1
    } ;

static const flex_int16_t yy_base[514] =
    {   0,
        0,    0,  244, 2406,   54, 2406, 2406, 2406, 2406,  231,
      229,   49,  225, 2406,   46, 2406, 2406,   51,   52,   54,
       56,   75,   80,   93,   92,   90,   94,  105,  116,  118,
      122,  128,  124,  142,  143,  153,  165,  170, 2406, 2406,
       73,  223, 2406,  220,  184,  191,  218,  207,  190,  193,
       60,  195,  196,   79,  198,  201,  215,  218,  219,  223,
      241,  242,  243,  256,  260,  264,  268,  266,  279,  283,
      285,  287,  297,  312,  318,  322,  323,  324,  343,  347,
      349,  353,  366,  367,  368,  371,  372,  389,  393,  394,
      408,  412,  413,  202,  146,  199,  185,  178,  414,  148,

      425,  151,  431,  435,  436,  437,  439,  460,  462,  464,
      468,  470,  482,  474,  495,  496,  497,  508,  516,  520,
      521,  531,  534,  533,  539,  554,  556,  558,  562,  573,
      577,  583,  585,  591,  602,  603,  608,  613,  614,  616,
      626,  639,  641,  643,  644,  654,  662,  666, 2406, 2406,
      667,  679,  681,  685,  687,  691,  704,  708,  709,  712,
      723,  727,  731,  735,  745,  746,  749,  760,  757,  768,
      771,  772,  783,  793,  796,  785,  797,  798,  808,  820,
      822,  823,  826,  828,  843,  848,  849,  851,  861,  869,
      871,  874,  875,  888,  894,  896,  899,  900,  902,  914,

      919,  922,  933,  934,  944,  946,  956,  958,  961,  964,
      966,  981,  976,  986,  987,  998,  999, 1004, 1009, 1012,
     1027, 1031, 1032, 1035, 1033, 1052, 1053, 1057, 1058, 1070,
     1075, 1076, 1078, 1089, 1095, 1099, 1101, 1107, 1120, 1126,
     1130, 1124, 1134, 1144, 1147, 1148, 1149, 1161, 1171, 1174,
     1175, 1179, 1189, 1197, 1199, 1200, 1201, 1203, 1214, 1222,
     1224, 1241, 1226, 1236, 1246, 1249, 1251, 1263, 1261, 1264,
     1274, 1269, 1288, 1292, 1302, 1294, 1306, 1307, 1319, 1320,
     1321, 1333, 1338, 1343, 1344, 1348, 1356, 1370, 1358, 1371,
     1381, 1375, 1392, 1393, 1398, 1403, 1404, 1406, 1416, 1421,

     1427, 1431, 1435, 1441, 1454, 1455, 1459, 1465, 1473, 1477,
     1478, 1479, 1497, 1491, 1496, 1511, 1519, 1521, 1522, 1523,
     1524, 1534, 1544, 1546, 1547, 1566, 1567, 1568, 1569, 1570,
     1572, 1580, 1590, 1592, 1594, 1600, 1604, 1614, 1617, 1618,
     1629, 1632, 1635, 1637, 1640, 1652, 1655, 1657, 1658, 1675,
     1680, 1681, 1683, 1685, 1695, 1705, 1706, 1707, 1708, 1718,
     1728, 1729, 1730, 1732, 1733, 1743, 1753, 1755, 1756, 1757,
     1767, 1770, 1775, 1778, 1781, 1793, 1796, 1801, 1804, 1807,
     1815, 1819, 1821, 1829, 1833, 1839, 1841, 1843, 1851, 1854,
     1865, 1866, 1868, 1878, 1883, 1886, 1889, 1888, 1891, 1901,

     1912, 1914, 1918, 1924, 1929, 1942, 1943, 1946, 1947, 1948,
     1960, 1965, 1966, 1968, 1971, 1985, 1986, 1990, 1998, 2000,
     2003, 2004, 2008, 2021, 2018, 2036, 2038, 2041, 2044, 2049,
     2070, 2067, 2055, 2072, 2078, 2084, 2089, 2095, 2099, 2101,
     2109, 2120, 2112, 2123, 2124, 2134, 2135, 2138,   43, 2146,
     2152, 2160, 2163, 2166, 2171, 2184, 2185, 2188, 2189, 2203,
     2207,  150,  135, 2209, 2211, 2213, 2215, 2232, 2235, 2236,
     2247, 2250, 2253,  125,  111, 2261, 2264, 2267, 2278, 2281,
     2286, 2289,  115,  106, 2292, 2300, 2304, 2306, 2314,   96,
     2406, 2318, 2324, 2332, 2335, 2338,   87, 2346, 2349,   83,

     2352, 2360,   73, 2364,   83, 2366,   77, 2406, 2406,   98,
       93,   78,   74
    } ;

static const flex_int16_t yy_def[514] =
    {   0,
      509,    1,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  510,  509,  509,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  510,  510,
      512,  511,  511,  513,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  509,  509,  509,  509,  509,  510,  512,

      511,  513,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  509,  509,
      510,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,

      511,  511,  511,  511,  510,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  510,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,

      511,  511,  511,  511,  511,  511,  511,  511,  510,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  510,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  510,  511,  511,  511,  511,  511,  511,  511,  511,

      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  509,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  509,  509,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  509,  509,  511,  511,  511,  511,  511,
      511,  511,  509,  509,  511,  511,  511,  511,  511,  509,
      509,  511,  511,  511,  511,  511,  509,  511,  511,  509,

      511,  511,  509,  511,  509,  511,  509,  509,    0,  509,
      509,  509,  509
    } ;

static const flex_int16_t yy_nxt[2462] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,    4,   10,   11,
       12,   13,    4,   14,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   16,   17,    4,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   27,   29,
       30,   31,   32,   33,   34,   35,   36,   27,   37,   38,
       27,   27,   27,   39,   40,   41,   48,   41,   44,   45,
      462,   48,   48,   50,   48,  463,   48,   46,   53,   53,
       48,   53,   51,   53,   41,  102,   41,   54,   54,  100,
       54,   58,   54,   62,   55,   48,   51,   63,   59,   48,
       48,   64,   53,   56,   52,   60,   57,   53,   61,   49,

       48,   54,   48,   48,   48,   54,   54,   53,  508,   53,
       53,   53,  507,  505,  503,   48,   54,  500,   54,   54,
       54,   67,   53,   65,   68,   66,   48,   69,   48,   70,
       71,   54,   48,   53,   48,   53,  497,  491,   48,   53,
       72,   53,   54,   73,   54,   53,  490,   74,   54,  484,
       54,   75,   48,   48,   54,   79,   95,   76,   48,   53,
       53,   48,   80,   48,   46,   77,   78,  483,   54,   54,
       53,   82,   81,   83,   51,   48,  475,   54,   85,   54,
       48,  474,   53,   84,   89,   86,  150,   53,   90,   87,
       88,   54,   92,   44,   45,   97,   54,   91,   96,   96,

       48,   97,   46,   48,   93,   48,   48,   50,   48,   97,
       50,   48,   53,   53,  149,   53,   51,   48,   53,   51,
       99,   54,   54,  101,   54,   48,   98,   54,   48,   48,
       95,  103,   53,   48,   94,   53,   53,   47,   43,   42,
       53,   54,  104,  509,   54,   54,  107,  509,  509,   54,
      105,   48,   48,   48,  509,  509,  509,  509,   53,   53,
       53,  108,  109,  110,  106,  509,   48,   54,   54,   54,
       48,  509,  111,   53,   48,  509,   48,   53,   48,  509,
      509,   53,   54,   53,  509,   53,   54,  113,  112,   48,
       54,  115,   54,   48,   54,   48,   53,   48,  509,  509,

       53,  114,   53,  509,   53,   54,  118,   48,  509,   54,
      116,   54,  117,   54,   53,  509,  509,  509,  509,  121,
      509,  509,   48,   54,  119,  120,  509,  124,   48,   53,
      122,  123,   48,   48,   48,   53,  509,  125,   54,   53,
       53,   53,  127,  126,   54,  509,  509,  509,   54,   54,
       54,  128,  130,   48,  132,  509,  509,   48,  509,   48,
       53,  509,  131,   48,   53,  509,   53,  509,  129,   54,
       53,  509,  133,   54,  135,   54,   48,   48,   48,   54,
      137,   48,   48,   53,   53,   53,  509,  134,   53,   53,
      136,  509,   54,   54,   54,  509,  138,   54,   54,   48,

      509,  509,  141,   48,   48,  139,   53,  509,  509,  509,
       53,   53,  509,  509,  140,   54,  142,  143,   48,   54,
       54,  509,   48,   48,   48,   53,  509,  509,  509,   53,
       53,   50,  509,  145,   54,   48,  509,  144,   54,   54,
       51,   48,   53,  146,  148,   48,   48,   48,   53,   48,
      147,   54,   53,   53,   53,  509,   53,   54,  509,  509,
      151,   54,   54,   54,  509,   54,  509,  509,  156,  509,
       48,  152,   48,  154,   48,  153,  155,   53,   48,   53,
       48,   53,  509,  157,   48,   53,   54,   53,   54,  509,
       54,   53,   48,  509,   54,  161,   54,  509,  158,   53,

       54,  162,  509,  509,  159,   48,   48,   48,   54,  160,
      164,  509,   53,   53,   53,  509,  509,  163,   48,  509,
      509,   54,   54,   54,  509,   53,   48,  166,  509,  509,
       48,   48,  509,   53,   54,  165,  168,   53,   53,  169,
      167,   48,   54,   48,   48,  509,   54,   54,   53,   48,
       53,   53,  173,  170,  509,  509,   53,   54,  509,   54,
       54,  172,  171,  176,   48,   54,   48,  509,   48,  509,
      509,   53,   48,   53,  177,   53,  509,  174,  175,   53,
       54,  509,   54,   48,   54,  178,  180,   48,   54,  509,
       53,  179,  509,   48,   53,   48,  509,  181,  509,   54,

       53,   48,   53,   54,  182,  183,  509,  509,   53,   54,
      509,   54,   48,   48,  184,  509,  509,   54,   48,   53,
       53,  509,  185,   48,   48,   53,   48,  509,   54,   54,
       53,   53,  188,   53,   54,  509,   48,  186,  509,   54,
       54,  509,   54,   53,  191,  192,  189,  187,  190,   48,
      509,   48,   54,   48,   48,  194,   53,  196,   53,  509,
       53,   53,  197,  193,   48,   54,  509,   54,  509,   54,
       54,   53,   48,  509,  195,  201,   48,   48,  198,   53,
       54,  509,  200,   53,   50,  509,  199,  202,   54,   48,
      509,   48,   54,   51,  205,   48,   53,   48,   53,  509,

      509,   48,   53,  509,   53,   54,  206,   54,   53,  203,
      204,   54,  207,   54,   48,  509,  208,   54,   48,   48,
      209,   53,   48,  509,  210,   53,   53,  509,  509,   53,
       54,  211,  509,   48,   54,   54,  213,   48,   54,  212,
       53,   48,  509,  509,   53,   48,  509,  214,   53,   54,
      215,  509,   53,   54,  509,   48,   48,   54,  216,   48,
      509,   54,   53,   53,  509,  509,   53,   48,  509,  217,
       48,   54,   54,  218,   53,   54,  220,   53,   48,  219,
      509,   48,   48,   54,  223,   53,   54,  224,   53,   53,
      222,  221,  509,   48,   54,   48,  509,   54,   54,  226,

       53,  225,   53,   48,  509,  509,   48,   48,   48,   54,
       53,   54,  227,   53,   53,   53,  228,  509,   48,   54,
      230,  509,   54,   54,   54,   53,  509,  229,  509,  232,
       48,  231,   48,   48,   54,  234,   48,   53,   48,   53,
       53,  509,  233,   53,  509,   53,   54,  509,   54,   54,
      509,  235,   54,   48,   54,  509,  509,  237,   48,   48,
       53,   48,  236,  509,  509,   53,   53,  509,   53,   54,
      239,   48,  238,  509,   54,   54,  509,   54,   53,   48,
      241,   48,  242,  240,   48,   48,   53,   54,   53,  509,
      509,   53,   53,  246,  509,   54,  243,   54,   48,  509,

       54,   54,  247,  245,   48,   53,   48,  509,  509,   48,
       48,   53,   48,   53,   54,  244,   53,   53,  509,   53,
       54,  509,   54,  248,   48,   54,   54,  509,   54,   48,
      509,   53,   48,  253,  249,  252,   53,  250,  509,   53,
       54,  509,  509,   48,   48,   54,  251,  509,   54,  254,
       53,   53,  509,  509,   48,  255,   48,  509,  509,   54,
       54,   50,  509,   53,  256,  257,   48,  258,   48,  259,
       51,   48,   54,   53,   48,   53,   48,  509,   53,  509,
      509,   53,   54,   53,   54,  261,   48,   54,  509,  260,
       54,   48,   54,   53,  509,  264,   48,   48,   53,  509,

      509,  509,   54,   53,   53,  263,  262,   54,   48,   48,
      265,  509,   54,   54,   48,   53,   53,  267,  509,   48,
      266,   53,   48,  509,   54,   54,   53,  268,  509,   53,
       54,  509,  269,  270,  271,   54,  273,   48,   54,  272,
      274,   48,   48,   48,   53,   48,  509,  275,   53,   53,
       53,  509,   53,   54,  509,  509,  509,   54,   54,   54,
      279,   54,   48,   48,  509,  509,  509,   48,   48,   53,
       53,  276,  277,  278,   53,   53,  509,  509,   54,   54,
       48,  509,  509,   54,   54,   48,   48,   53,   48,  283,
      509,  509,   53,   53,  509,   53,   54,  281,  280,   48,

      509,   54,   54,  282,   54,   48,   53,  286,  509,   48,
      284,   48,   53,  287,  509,   54,   53,   48,   53,  509,
      285,   54,  509,  509,   53,   54,  509,   54,  509,  509,
       48,  509,  509,   54,   48,  288,   48,   53,  291,  289,
       48,   53,  509,   53,   48,  290,   54,   53,  509,  294,
       54,   53,   54,  292,   48,  293,   54,   48,   48,   48,
       54,   53,  509,  509,   53,   53,   53,  509,  509,  295,
       54,   48,  509,   54,   54,   54,  509,  509,   53,  297,
      296,   48,  298,  299,   48,   48,  509,   54,   53,   48,
      509,   53,   53,  301,  509,  300,   53,   54,  509,   48,

       54,   54,  304,  509,  302,   54,   53,   48,  509,   48,
       48,   48,  303,   48,   53,   54,   53,   53,   53,  305,
       50,  509,  509,   54,   48,   54,   54,   54,  509,   51,
      308,   53,   48,  509,   48,  306,   48,  307,  509,   53,
       54,   53,  509,   53,  509,  509,   48,  509,   54,  311,
       54,   48,   54,   53,  309,  313,   48,  509,   53,   48,
      509,   48,   54,   53,  312,  310,   53,   54,   53,  509,
      314,   48,   54,   48,   48,   54,  317,   54,   53,   48,
       53,   53,  315,  509,   48,  509,   53,   54,  509,   54,
       54,   53,  316,  509,  319,   54,  320,  318,   48,  509,

       54,  509,   48,  509,   48,   53,  509,  509,  323,   53,
      321,   53,   48,  509,   54,  322,   48,   48,   54,   53,
       54,  327,  325,   53,   53,  509,  509,  509,   54,   48,
       48,   48,   54,   54,  324,  509,   53,   53,   53,  509,
      509,  509,  326,   48,  509,   54,   54,   54,   48,  509,
       53,  328,  509,   48,   48,   53,  330,  329,   48,   54,
       53,   53,  509,  509,   54,   53,   48,  509,   48,   54,
       54,  509,  509,   53,   54,   53,  509,  509,  331,  333,
       48,   48,   54,  335,   54,   48,  509,   53,   53,  332,
      509,   48,   53,  334,  509,  509,   54,   54,   53,  337,

      509,   54,   48,   48,  509,  336,  339,   54,   48,   53,
       53,  338,  509,   48,   48,   53,   48,  509,   54,   54,
       53,   53,  509,   53,   54,  509,   48,  340,  341,   54,
       54,   48,   54,   53,  509,  509,  509,   48,   53,  509,
      509,   48,   54,  342,   53,   48,  345,   54,   53,  509,
      344,   48,   53,   54,  343,  509,  347,   54,   53,  509,
      509,   54,  348,  509,   48,   48,  346,   54,  509,   48,
      509,   53,   53,  349,  509,   48,   53,  509,  509,  350,
       54,   54,   53,   48,  351,   54,  353,   48,   48,   48,
       50,   54,  509,  509,   53,   53,   53,  509,  509,   51,

      352,   48,  509,   54,   54,   54,   48,   48,   53,  354,
      509,  509,  509,   53,   53,  355,  509,   54,  509,  356,
      509,   48,   54,   54,  357,  358,  509,  360,   53,   48,
      509,   48,   48,   48,   48,  509,   53,   54,   53,   53,
       53,   53,  359,  509,   48,   54,  361,   54,   54,   54,
       54,   53,  363,  509,   48,  509,   48,   48,  509,  509,
       54,   53,  364,   53,   53,  362,  509,  509,  509,  365,
       54,  366,   54,   54,  367,  368,   48,   48,   48,   48,
       48,  369,   48,   53,   53,   53,   53,   53,  509,   53,
       48,  509,   54,   54,   54,   54,   54,   53,   54,  373,

       48,  374,   48,  372,   48,  371,   54,   53,  509,   53,
       48,   53,  370,  509,   48,  375,   54,   53,   54,  376,
       54,   53,  509,  509,   48,  509,   54,   48,   48,  509,
       54,   53,  378,  509,   53,   53,  380,  509,  377,   48,
       54,  379,   48,   54,   54,   48,   53,   48,  509,   53,
       48,  509,   53,  509,   53,   54,  509,   53,   54,  509,
      381,   54,   48,   54,  509,   48,   54,   48,   48,   53,
      509,  384,   53,  509,   53,   53,  509,  509,   54,  382,
      509,   54,  509,   54,   54,   48,  387,  385,  383,  388,
       48,   48,   53,   48,  509,   48,  386,   53,   53,  509,

       53,   54,   53,  509,  509,   48,   54,   54,  509,   54,
      389,   54,   50,  509,  509,   48,   48,   48,   48,  509,
      509,   51,   53,   53,   53,   53,  392,  509,   48,  390,
      391,   54,   54,   54,   54,   53,  393,  509,   48,   48,
       48,  394,   48,   48,   54,   53,   53,   53,  395,   53,
       53,  509,  509,   48,   54,   54,   54,  509,   54,   54,
       53,  509,  396,   48,  398,   48,   48,   48,  400,   54,
       53,  509,   53,   53,   53,  509,  397,   48,  399,   54,
       48,   54,   54,   54,  403,   48,  509,   53,   48,  401,
      509,   48,   53,   54,  509,   53,   54,  402,   53,  404,

      509,   54,  405,   48,   54,  509,   48,   54,  407,  406,
       53,   48,  408,   53,   48,  509,  509,   48,   53,   54,
      509,   53,   54,  409,   53,   48,  509,   54,  509,   48,
       54,   48,   53,   54,  509,  509,   53,  509,   53,   48,
      509,   54,  411,   48,  410,   54,   53,   54,  509,   48,
       53,   48,  509,   48,  412,   54,   53,  509,   53,   54,
       53,   48,  509,  509,   48,   54,  509,   54,   53,   54,
      509,   53,  417,  414,  413,   48,   48,   54,   48,  415,
       54,  509,   53,   50,  509,   53,  416,  509,   48,  419,
      509,   54,   51,   48,   54,   53,   48,  418,   48,   48,

       53,   48,  509,   53,   54,   53,   53,  509,   53,   54,
      509,   48,   54,  509,   54,   54,  509,   54,   53,  420,
      423,  422,   48,  509,   48,  509,  509,   54,   48,   53,
      421,   53,  425,  509,   48,   53,  424,  509,   54,   48,
       54,   53,  426,  430,   54,  101,   53,  427,  509,  429,
       54,  509,   48,   48,  428,   54,   48,   48,   48,   53,
       53,  509,  509,   53,   53,   53,  509,  431,   54,   54,
       48,  509,   54,   54,   54,   48,   48,   53,   48,  509,
      509,   48,   53,   53,  509,   53,   54,  433,   53,  432,
      509,   54,   54,  434,   54,   48,   48,   54,  509,  509,

       48,  509,   53,   53,  509,  436,  435,   53,   48,  509,
       48,   54,   54,   48,   48,   53,   54,   53,   48,  509,
       53,   53,  509,  509,   54,   53,   54,  509,   48,   54,
       54,   48,  437,  509,   54,   53,  509,  509,   53,  439,
      440,  438,  509,  509,   54,  509,   48,   54,   48,  441,
      444,   48,  443,   53,   48,   53,  442,  509,   53,   48,
      509,   53,   54,  509,   54,   48,   53,   54,  509,  509,
       54,  509,   53,  449,  509,   54,  445,   48,  509,  446,
       48,   54,   48,  509,   53,  452,  447,   53,   48,   53,
      448,  509,  450,   54,   48,   53,   54,  509,   54,   48,

      509,   53,  451,  509,   54,   48,   53,  453,  509,   48,
       54,   48,   53,  454,  509,   54,   53,  509,   53,   48,
      509,   54,   48,  509,  455,   54,   53,   54,  509,   53,
       48,  509,  509,   48,   48,   54,  456,   53,   54,  457,
       53,   53,  509,  509,   48,   48,   54,  458,   48,   54,
       54,   53,   53,  509,  509,   53,   48,  509,  509,  509,
       54,   54,   48,   53,   54,  509,  460,  509,  461,   53,
       48,  509,   54,   48,  459,  509,   48,   53,   54,  509,
       53,   48,  509,   53,  509,  509,   54,  464,   53,   54,
      509,  466,   54,  465,   48,   48,  509,   54,   48,   48,

      509,   53,   53,  509,  467,   53,   53,  468,  509,  509,
       54,   54,  469,   48,   54,   54,  470,   48,  509,   48,
       53,   48,  509,   48,   53,   48,   53,  509,   53,   54,
       53,  509,   53,   54,  471,   54,  509,   54,  473,   54,
      509,   54,   48,  472,  509,   48,   48,  476,  509,   53,
      509,  477,   53,   53,  509,  478,  509,   48,   54,  509,
       48,   54,   54,   48,   53,  509,  509,   53,  509,  509,
       53,   48,  479,   54,   48,  480,   54,   48,   53,   54,
      482,   53,  481,  509,   53,  509,  509,   54,   48,  509,
       54,   48,  485,   54,  509,   53,   48,  509,   53,   48,

      509,  487,   48,   53,   54,  486,   53,   54,  509,   53,
       48,  492,   54,  509,   48,   54,   48,   53,   54,  509,
      489,   53,  509,   53,   48,  509,   54,  488,   48,  509,
       54,   53,   54,  509,   48,   53,  494,  509,  493,  509,
       54,   53,   48,  509,   54,   48,  495,  509,   48,   53,
       54,  509,   53,  498,  496,   53,   48,  509,   54,   48,
      509,   54,   48,   53,   54,  509,   53,  499,  509,   53,
       48,  509,   54,  509,   48,   54,   48,   53,   54,  509,
      502,   53,  509,   53,  509,  509,   54,  504,  509,  509,
       54,  509,   54,  509,  509,  509,  501,  509,  509,  509,

      509,  509,  509,  509,  506,    3,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509
    } ;

static const flex_int16_t yy_chk[2462] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    5,   15,    5,   12,   12,
      449,   18,   19,   15,   20,  449,   21,   12,   18,   19,
       51,   20,   15,   21,   41,  513,   41,   18,   19,  512,
       20,   20,   21,   21,   18,   22,   51,   21,   20,   54,
       23,   21,   22,   19,  511,   20,   19,   23,   20,  510,

       26,   22,   25,   24,   27,   54,   23,   26,  507,   25,
       24,   27,  505,  503,  500,   28,   26,  497,   25,   24,
       27,   23,   28,   22,   24,   22,   29,   25,   30,   26,
       26,   28,   31,   29,   33,   30,  490,  484,   32,   31,
       28,   33,   29,   29,   30,   32,  483,   29,   31,  475,
       33,   29,   34,   35,   32,   32,   95,   29,  100,   34,
       35,  102,   32,   36,   95,   30,   31,  474,   34,   35,
       36,   33,   32,   34,  100,   37,  463,  102,   35,   36,
       38,  462,   37,   34,   36,   35,   98,   38,   36,   35,
       35,   37,   37,   45,   45,   97,   38,   36,   46,   46,

       49,   46,   45,   50,   38,   52,   53,   49,   55,   96,
       50,   56,   52,   53,   94,   55,   49,   48,   56,   50,
       50,   52,   53,   53,   55,   57,   47,   56,   58,   59,
       44,   55,   57,   60,   42,   58,   59,   13,   11,   10,
       60,   57,   56,    3,   58,   59,   59,    0,    0,   60,
       57,   61,   62,   63,    0,    0,    0,    0,   61,   62,
       63,   60,   60,   60,   58,    0,   64,   61,   62,   63,
       65,    0,   61,   64,   66,    0,   68,   65,   67,    0,
        0,   66,   64,   68,    0,   67,   65,   63,   62,   69,
       66,   65,   68,   70,   67,   71,   69,   72,    0,    0,

       70,   64,   71,    0,   72,   69,   68,   73,    0,   70,
       66,   71,   67,   72,   73,    0,    0,    0,    0,   71,
        0,    0,   74,   73,   69,   70,    0,   72,   75,   74,
       71,   71,   76,   77,   78,   75,    0,   73,   74,   76,
       77,   78,   74,   73,   75,    0,    0,    0,   76,   77,
       78,   74,   76,   79,   78,    0,    0,   80,    0,   81,
       79,    0,   77,   82,   80,    0,   81,    0,   75,   79,
       82,    0,   79,   80,   80,   81,   83,   84,   85,   82,
       82,   86,   87,   83,   84,   85,    0,   79,   86,   87,
       81,    0,   83,   84,   85,    0,   83,   86,   87,   88,

        0,    0,   86,   89,   90,   84,   88,    0,    0,    0,
       89,   90,    0,    0,   85,   88,   87,   88,   91,   89,
       90,    0,   92,   93,   99,   91,    0,    0,    0,   92,
       93,   99,    0,   90,   91,  101,    0,   89,   92,   93,
       99,  103,  101,   91,   93,  104,  105,  106,  103,  107,
       92,  101,  104,  105,  106,    0,  107,  103,    0,    0,
       99,  104,  105,  106,    0,  107,    0,    0,  106,    0,
      108,  101,  109,  104,  110,  103,  105,  108,  111,  109,
      112,  110,    0,  107,  114,  111,  108,  112,  109,    0,
      110,  114,  113,    0,  111,  111,  112,    0,  108,  113,

      114,  112,    0,    0,  109,  115,  116,  117,  113,  110,
      114,    0,  115,  116,  117,    0,    0,  113,  118,    0,
        0,  115,  116,  117,    0,  118,  119,  116,    0,    0,
      120,  121,    0,  119,  118,  115,  117,  120,  121,  118,
      116,  122,  119,  124,  123,    0,  120,  121,  122,  125,
      124,  123,  121,  118,    0,    0,  125,  122,    0,  124,
      123,  120,  119,  124,  126,  125,  127,    0,  128,    0,
        0,  126,  129,  127,  125,  128,    0,  122,  123,  129,
      126,    0,  127,  130,  128,  126,  128,  131,  129,    0,
      130,  127,    0,  132,  131,  133,    0,  129,    0,  130,

      132,  134,  133,  131,  130,  131,    0,    0,  134,  132,
        0,  133,  135,  136,  132,    0,    0,  134,  137,  135,
      136,    0,  133,  138,  139,  137,  140,    0,  135,  136,
      138,  139,  136,  140,  137,    0,  141,  134,    0,  138,
      139,    0,  140,  141,  138,  139,  137,  135,  137,  142,
        0,  143,  141,  144,  145,  141,  142,  143,  143,    0,
      144,  145,  143,  140,  146,  142,    0,  143,    0,  144,
      145,  146,  147,    0,  142,  145,  148,  151,  143,  147,
      146,    0,  144,  148,  151,    0,  143,  146,  147,  152,
        0,  153,  148,  151,  151,  154,  152,  155,  153,    0,

        0,  156,  154,    0,  155,  152,  152,  153,  156,  147,
      148,  154,  153,  155,  157,    0,  154,  156,  158,  159,
      155,  157,  160,    0,  156,  158,  159,    0,    0,  160,
      157,  157,    0,  161,  158,  159,  159,  162,  160,  158,
      161,  163,    0,    0,  162,  164,    0,  159,  163,  161,
      159,    0,  164,  162,    0,  165,  166,  163,  160,  167,
        0,  164,  165,  166,    0,    0,  167,  169,    0,  161,
      168,  165,  166,  162,  169,  167,  164,  168,  170,  163,
        0,  171,  172,  169,  167,  170,  168,  168,  171,  172,
      166,  165,    0,  173,  170,  176,    0,  171,  172,  170,

      173,  169,  176,  174,    0,    0,  175,  177,  178,  173,
      174,  176,  171,  175,  177,  178,  172,    0,  179,  174,
      174,    0,  175,  177,  178,  179,    0,  173,    0,  177,
      180,  175,  181,  182,  179,  179,  183,  180,  184,  181,
      182,    0,  178,  183,    0,  184,  180,    0,  181,  182,
        0,  180,  183,  185,  184,    0,    0,  183,  186,  187,
      185,  188,  181,    0,    0,  186,  187,    0,  188,  185,
      185,  189,  184,    0,  186,  187,    0,  188,  189,  190,
      187,  191,  188,  186,  192,  193,  190,  189,  191,    0,
        0,  192,  193,  192,    0,  190,  189,  191,  194,    0,

      192,  193,  193,  191,  195,  194,  196,    0,    0,  197,
      198,  195,  199,  196,  194,  190,  197,  198,    0,  199,
      195,    0,  196,  194,  200,  197,  198,    0,  199,  201,
        0,  200,  202,  199,  195,  198,  201,  196,    0,  202,
      200,    0,    0,  203,  204,  201,  197,    0,  202,  200,
      203,  204,    0,    0,  205,  202,  206,    0,    0,  203,
      204,  205,    0,  206,  203,  204,  207,  205,  208,  206,
      205,  209,  206,  207,  210,  208,  211,    0,  209,    0,
        0,  210,  207,  211,  208,  208,  213,  209,    0,  207,
      210,  212,  211,  213,    0,  211,  214,  215,  212,    0,

        0,    0,  213,  214,  215,  210,  209,  212,  216,  217,
      212,    0,  214,  215,  218,  216,  217,  214,    0,  219,
      213,  218,  220,    0,  216,  217,  219,  215,    0,  220,
      218,    0,  215,  216,  217,  219,  219,  221,  220,  218,
      219,  222,  223,  225,  221,  224,    0,  220,  222,  223,
      225,    0,  224,  221,    0,    0,    0,  222,  223,  225,
      225,  224,  226,  227,    0,    0,    0,  228,  229,  226,
      227,  222,  223,  224,  228,  229,    0,    0,  226,  227,
      230,    0,    0,  228,  229,  231,  232,  230,  233,  229,
        0,    0,  231,  232,    0,  233,  230,  227,  226,  234,

        0,  231,  232,  228,  233,  235,  234,  232,    0,  236,
      230,  237,  235,  233,    0,  234,  236,  238,  237,    0,
      231,  235,    0,    0,  238,  236,    0,  237,    0,    0,
      239,    0,    0,  238,  242,  234,  240,  239,  238,  235,
      241,  242,    0,  240,  243,  237,  239,  241,    0,  241,
      242,  243,  240,  239,  244,  240,  241,  245,  246,  247,
      243,  244,    0,    0,  245,  246,  247,    0,    0,  242,
      244,  248,    0,  245,  246,  247,    0,    0,  248,  244,
      243,  249,  245,  246,  250,  251,    0,  248,  249,  252,
        0,  250,  251,  248,    0,  247,  252,  249,    0,  253,

      250,  251,  251,    0,  249,  252,  253,  254,    0,  255,
      256,  257,  250,  258,  254,  253,  255,  256,  257,  252,
      258,    0,    0,  254,  259,  255,  256,  257,    0,  258,
      255,  259,  260,    0,  261,  253,  263,  254,    0,  260,
      259,  261,    0,  263,    0,    0,  264,    0,  260,  260,
      261,  262,  263,  264,  258,  262,  265,    0,  262,  266,
        0,  267,  264,  265,  261,  259,  266,  262,  267,    0,
      263,  269,  265,  268,  270,  266,  266,  267,  269,  272,
      268,  270,  264,    0,  271,    0,  272,  269,    0,  268,
      270,  271,  265,    0,  268,  272,  269,  267,  273,    0,

      271,    0,  274,    0,  276,  273,    0,    0,  272,  274,
      270,  276,  275,    0,  273,  271,  277,  278,  274,  275,
      276,  276,  274,  277,  278,    0,    0,    0,  275,  279,
      280,  281,  277,  278,  273,    0,  279,  280,  281,    0,
        0,    0,  275,  282,    0,  279,  280,  281,  283,    0,
      282,  277,    0,  284,  285,  283,  281,  279,  286,  282,
      284,  285,    0,    0,  283,  286,  287,    0,  289,  284,
      285,    0,    0,  287,  286,  289,    0,    0,  283,  285,
      288,  290,  287,  287,  289,  292,    0,  288,  290,  284,
        0,  291,  292,  286,    0,    0,  288,  290,  291,  289,

        0,  292,  293,  294,    0,  288,  292,  291,  295,  293,
      294,  291,    0,  296,  297,  295,  298,    0,  293,  294,
      296,  297,    0,  298,  295,    0,  299,  293,  294,  296,
      297,  300,  298,  299,    0,    0,    0,  301,  300,    0,
        0,  302,  299,  295,  301,  303,  298,  300,  302,    0,
      297,  304,  303,  301,  296,    0,  300,  302,  304,    0,
        0,  303,  301,    0,  305,  306,  299,  304,    0,  307,
        0,  305,  306,  303,    0,  308,  307,    0,    0,  304,
      305,  306,  308,  309,  305,  307,  307,  310,  311,  312,
      309,  308,    0,    0,  310,  311,  312,    0,    0,  309,

      306,  314,    0,  310,  311,  312,  315,  313,  314,  308,
        0,    0,    0,  315,  313,  309,    0,  314,    0,  310,
        0,  316,  315,  313,  311,  313,    0,  315,  316,  317,
        0,  318,  319,  320,  321,    0,  317,  316,  318,  319,
      320,  321,  314,    0,  322,  317,  316,  318,  319,  320,
      321,  322,  318,    0,  323,    0,  324,  325,    0,    0,
      322,  323,  319,  324,  325,  317,    0,    0,    0,  320,
      323,  321,  324,  325,  322,  323,  326,  327,  328,  329,
      330,  324,  331,  326,  327,  328,  329,  330,    0,  331,
      332,    0,  326,  327,  328,  329,  330,  332,  331,  330,

      333,  331,  334,  328,  335,  327,  332,  333,    0,  334,
      336,  335,  326,    0,  337,  332,  333,  336,  334,  333,
      335,  337,    0,    0,  338,    0,  336,  339,  340,    0,
      337,  338,  335,    0,  339,  340,  337,    0,  334,  341,
      338,  336,  342,  339,  340,  343,  341,  344,    0,  342,
      345,    0,  343,    0,  344,  341,    0,  345,  342,    0,
      340,  343,  346,  344,    0,  347,  345,  348,  349,  346,
        0,  345,  347,    0,  348,  349,    0,    0,  346,  341,
        0,  347,    0,  348,  349,  350,  348,  346,  344,  349,
      351,  352,  350,  353,    0,  354,  347,  351,  352,    0,

      353,  350,  354,    0,    0,  355,  351,  352,    0,  353,
      350,  354,  355,    0,    0,  356,  357,  358,  359,    0,
        0,  355,  356,  357,  358,  359,  355,    0,  360,  353,
      354,  356,  357,  358,  359,  360,  356,    0,  361,  362,
      363,  357,  364,  365,  360,  361,  362,  363,  358,  364,
      365,    0,    0,  366,  361,  362,  363,    0,  364,  365,
      366,    0,  360,  367,  362,  368,  369,  370,  365,  366,
      367,    0,  368,  369,  370,    0,  361,  371,  364,  367,
      372,  368,  369,  370,  371,  373,    0,  372,  374,  366,
        0,  375,  373,  371,    0,  374,  372,  369,  375,  372,

        0,  373,  373,  376,  374,    0,  377,  375,  375,  374,
      376,  378,  376,  377,  379,    0,    0,  380,  378,  376,
        0,  379,  377,  377,  380,  381,    0,  378,    0,  382,
      379,  383,  381,  380,    0,    0,  382,    0,  383,  384,
        0,  381,  381,  385,  379,  382,  384,  383,    0,  386,
      385,  387,    0,  388,  382,  384,  386,    0,  387,  385,
      388,  389,    0,    0,  390,  386,    0,  387,  389,  388,
        0,  390,  388,  385,  384,  391,  392,  389,  393,  386,
      390,    0,  391,  392,    0,  393,  387,    0,  394,  390,
        0,  391,  392,  395,  393,  394,  396,  389,  398,  397,

      395,  399,    0,  396,  394,  398,  397,    0,  399,  395,
        0,  400,  396,    0,  398,  397,    0,  399,  400,  394,
      397,  396,  401,    0,  402,    0,    0,  400,  403,  401,
      395,  402,  399,    0,  404,  403,  398,    0,  401,  405,
      402,  404,  400,  404,  403,  403,  405,  401,    0,  403,
      404,    0,  406,  407,  402,  405,  408,  409,  410,  406,
      407,    0,    0,  408,  409,  410,    0,  405,  406,  407,
      411,    0,  408,  409,  410,  412,  413,  411,  414,    0,
        0,  415,  412,  413,    0,  414,  411,  408,  415,  407,
        0,  412,  413,  409,  414,  416,  417,  415,    0,    0,

      418,    0,  416,  417,    0,  412,  411,  418,  419,    0,
      420,  416,  417,  421,  422,  419,  418,  420,  423,    0,
      421,  422,    0,    0,  419,  423,  420,    0,  425,  421,
      422,  424,  417,    0,  423,  425,    0,    0,  424,  419,
      420,  418,    0,    0,  425,    0,  426,  424,  427,  421,
      425,  428,  424,  426,  429,  427,  422,    0,  428,  430,
        0,  429,  426,    0,  427,  433,  430,  428,    0,    0,
      429,    0,  433,  431,    0,  430,  426,  432,    0,  427,
      431,  433,  434,    0,  432,  433,  429,  431,  435,  434,
      430,    0,  431,  432,  436,  435,  431,    0,  434,  437,

        0,  436,  432,    0,  435,  438,  437,  434,    0,  439,
      436,  440,  438,  435,    0,  437,  439,    0,  440,  441,
        0,  438,  443,    0,  437,  439,  441,  440,    0,  443,
      442,    0,    0,  444,  445,  441,  438,  442,  443,  439,
      444,  445,    0,    0,  446,  447,  442,  442,  448,  444,
      445,  446,  447,    0,    0,  448,  450,    0,    0,    0,
      446,  447,  451,  450,  448,    0,  447,    0,  448,  451,
      452,    0,  450,  453,  446,    0,  454,  452,  451,    0,
      453,  455,    0,  454,    0,    0,  452,  450,  455,  453,
        0,  452,  454,  451,  456,  457,    0,  455,  458,  459,

        0,  456,  457,    0,  453,  458,  459,  454,    0,    0,
      456,  457,  455,  460,  458,  459,  456,  461,    0,  464,
      460,  465,    0,  466,  461,  467,  464,    0,  465,  460,
      466,    0,  467,  461,  458,  464,    0,  465,  461,  466,
        0,  467,  468,  460,    0,  469,  470,  464,    0,  468,
        0,  465,  469,  470,    0,  467,    0,  471,  468,    0,
      472,  469,  470,  473,  471,    0,    0,  472,    0,    0,
      473,  476,  468,  471,  477,  469,  472,  478,  476,  473,
      472,  477,  471,    0,  478,    0,    0,  476,  479,    0,
      477,  480,  476,  478,    0,  479,  481,    0,  480,  482,

        0,  480,  485,  481,  479,  479,  482,  480,    0,  485,
      486,  485,  481,    0,  487,  482,  488,  486,  485,    0,
      482,  487,    0,  488,  489,    0,  486,  481,  492,    0,
      487,  489,  488,    0,  493,  492,  487,    0,  486,    0,
      489,  493,  494,    0,  492,  495,  488,    0,  496,  494,
      493,    0,  495,  492,  489,  496,  498,    0,  494,  499,
        0,  495,  501,  498,  496,    0,  499,  496,    0,  501,
      502,    0,  498,    0,  504,  499,  506,  502,  501,    0,
      499,  504,    0,  506,    0,    0,  502,  501,    0,    0,
      504,    0,  506,    0,    0,    0,  498,    0,    0,    0,

        0,    0,    0,    0,  504,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[85] =
    {   0,
0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lexer.l"
#line 2 "lexer.l"
/* Reconhecedor de uma linguagem simplificada */
#include <iostream>
#include "tokens.h"
using std::cout;

/* Variaveis globais para linha e coluna */
extern int yylineno;
int column = 1;

/* Função que atualiza a coluna */
void update_column(yyFlexLexer& scanner) {
    column += scanner.YYLeng();
}
#line 1151 "/home/tacioplays/Compiladores/TontoAnalyzer/Build/lex.yy.cc"
/* Definições Regulares */
/*string	{letras}({letras}|{digito})*  */
/* Nome da Classe */
/* Nome da Relação */
/* Nome da Instancia */
/* Nome Novos Tipos */
/* Regras de Tradução */
#line 1159 "/home/tacioplays/Compiladores/TontoAnalyzer/Build/lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 43 "lexer.l"

#line 1293 "/home/tacioplays/Compiladores/TontoAnalyzer/Build/lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 510 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2406 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 44 "lexer.l"
{ update_column(*this);}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 45 "lexer.l"
{ column = 1;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 47 "lexer.l"
{ update_column(*this); return T_PACKAGE; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 48 "lexer.l"
{ update_column(*this); return T_IMPORT; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 49 "lexer.l"
{ update_column(*this); return T_GENSET; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 50 "lexer.l"
{ update_column(*this); return T_DISJOINT; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 51 "lexer.l"
{ update_column(*this); return T_COMPLETE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 52 "lexer.l"
{ update_column(*this); return T_GENERAL; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 53 "lexer.l"
{ update_column(*this); return T_SPECIFICS; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 54 "lexer.l"
{ update_column(*this); return T_WHERE; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "lexer.l"
{ update_column(*this); return T_EVENT; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "lexer.l"
{ update_column(*this); return T_SITUATION; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 59 "lexer.l"
{ update_column(*this); return T_PROCESS; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 60 "lexer.l"
{ update_column(*this); return T_CATEGORY; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 61 "lexer.l"
{ update_column(*this); return T_MIXIN; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 62 "lexer.l"
{ update_column(*this); return T_PHASEMIXIN; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 63 "lexer.l"
{ update_column(*this); return T_ROLEMIXIN; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 64 "lexer.l"
{ update_column(*this); return T_HISTORICALROLEMIXIN; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 65 "lexer.l"
{ update_column(*this); return T_KIND; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 66 "lexer.l"
{ update_column(*this); return T_COLLECTIVE; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 67 "lexer.l"
{ update_column(*this); return T_QUANTITY; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 68 "lexer.l"
{ update_column(*this); return T_QUALITY; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 69 "lexer.l"
{ update_column(*this); return T_MODE; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 70 "lexer.l"
{ update_column(*this); return T_INTRINSICMODE; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 71 "lexer.l"
{ update_column(*this); return T_EXTRINSICMODE; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 72 "lexer.l"
{ update_column(*this); return T_SUBKIND; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 73 "lexer.l"
{ update_column(*this); return T_PHASE; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 74 "lexer.l"
{ update_column(*this); return T_ROLE; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 75 "lexer.l"
{ update_column(*this); return T_HISTORICALROLE; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 78 "lexer.l"
{ update_column(*this); return T_MATERIAL; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 79 "lexer.l"
{ update_column(*this); return T_DERIVATION; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 80 "lexer.l"
{ update_column(*this); return T_COMPARATIVE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 81 "lexer.l"
{ update_column(*this); return T_MEDIATION; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 82 "lexer.l"
{ update_column(*this); return T_CHARACTERIZATION; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 83 "lexer.l"
{ update_column(*this); return T_SUBCOLLECTIONOF; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 84 "lexer.l"
{ update_column(*this); return T_SUBQUALITYOF; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 85 "lexer.l"
{ update_column(*this); return T_INSTANTIATION; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 86 "lexer.l"
{ update_column(*this); return T_EXTERNALDEPENDENCE; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 87 "lexer.l"
{ update_column(*this); return T_COMPONENTOF; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 88 "lexer.l"
{ update_column(*this); return T_MEMBEROF; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 89 "lexer.l"
{ update_column(*this); return T_TERMINATION; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 90 "lexer.l"
{ update_column(*this); return T_PARTICIPATIONAL; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 91 "lexer.l"
{ update_column(*this); return T_PARTICIPATION; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 92 "lexer.l"
{ update_column(*this); return T_HISTORICALDEPENDENCE; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 93 "lexer.l"
{ update_column(*this); return T_CREATION; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 94 "lexer.l"
{ update_column(*this); return T_MANIFESTATION; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 95 "lexer.l"
{ update_column(*this); return T_BRINGSABOUT; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 96 "lexer.l"
{ update_column(*this); return T_TRIGGERS; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 97 "lexer.l"
{ update_column(*this); return T_COMPOSITION; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 98 "lexer.l"
{ update_column(*this); return T_AGGREGATION; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 99 "lexer.l"
{ update_column(*this); return T_INHERENCE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 100 "lexer.l"
{ update_column(*this); return T_VALUE; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 101 "lexer.l"
{ update_column(*this); return T_FORMAL; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 102 "lexer.l"
{ update_column(*this); return T_CONSTITUTION; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 105 "lexer.l"
{ update_column(*this); return T_NUMBER_TYPE; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 106 "lexer.l"
{ update_column(*this); return T_STRING_TYPE; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 107 "lexer.l"
{ update_column(*this); return T_BOOLEAN_TYPE; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 108 "lexer.l"
{ update_column(*this); return T_DATE_TYPE; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 109 "lexer.l"
{ update_column(*this); return T_TIME_TYPE; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 110 "lexer.l"
{ update_column(*this); return T_DATETIME_TYPE; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 113 "lexer.l"
{ update_column(*this); return T_ORDERED; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 114 "lexer.l"
{ update_column(*this); return T_CONST; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 115 "lexer.l"
{ update_column(*this); return T_DERIVED; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 116 "lexer.l"
{ update_column(*this); return T_SUBSETS; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 117 "lexer.l"
{ update_column(*this); return T_REDEFINES; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 120 "lexer.l"
{ update_column(*this); return T_LBRACE; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 121 "lexer.l"
{ update_column(*this); return T_RBRACE; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 122 "lexer.l"
{ update_column(*this); return T_LPAREN; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 123 "lexer.l"
{ update_column(*this); return T_RPAREN; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 124 "lexer.l"
{ update_column(*this); return T_LBRACK; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 125 "lexer.l"
{ update_column(*this); return T_RBRACK; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 126 "lexer.l"
{ update_column(*this); return T_DOTDOT; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 127 "lexer.l"
{ update_column(*this); return T_DIAMOND_ARROW; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 128 "lexer.l"
{ update_column(*this); return T_ARROW_DIAMOND; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 129 "lexer.l"
{ update_column(*this); return T_ASTERISK; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 130 "lexer.l"
{ update_column(*this); return T_AT; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 131 "lexer.l"
{ update_column(*this); return T_DOT; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 134 "lexer.l"
{ update_column(*this); return T_NEW_DATA_TYPE; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 135 "lexer.l"
{ update_column(*this); return T_CLASS_NAME; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 136 "lexer.l"
{ update_column(*this); return T_RELATION_NAME; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 137 "lexer.l"
{ update_column(*this); return T_INSTANCE_NAME; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 138 "lexer.l"
{ update_column(*this); return T_NUMBER; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 141 "lexer.l"
{
                    // Imprime a mensagem de erro 
                    cout << "Erro na linha " << yylineno << ", coluna " << column
                         << ": Token inválido '" << YYText() << "'\n";
                    // Sugestão de tratamento
                    cout << "  Sugestão: Verifique se o caractere é permitido pela linguagem TONTO ou se há erro na formação de um nome (ex: classe iniciando com minúscula, violação de convenção de nome, caractere especial inesperado).\n";
                    update_column(*this); 
                    return T_INVALID; 
                }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 150 "lexer.l"
ECHO;
	YY_BREAK
#line 1789 "/home/tacioplays/Compiladores/TontoAnalyzer/Build/lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 510 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 510 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 509);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 150 "lexer.l"


/* nenhuma função auxiliar é necessária */


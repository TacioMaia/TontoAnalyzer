#line 2 "/home/tacioplays/Compiladores/TontoAnalyzer/Build/lex.yy.cc"

#line 4 "/home/tacioplays/Compiladores/TontoAnalyzer/Build/lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 83
#define YY_END_OF_BUFFER 84
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[510] =
    {   0,
        0,    0,   84,   82,    1,    1,   67,   68,   74,   82,
       76,   81,   82,   75,   82,   69,   70,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   65,   66,
        1,    0,   71,    0,   81,    0,    0,   80,   78,   78,
        0,   79,   79,    0,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,    0,   81,    0,   81,    0,   78,   78,

       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   73,   72,
       78,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   57,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   18,   79,   79,   79,   79,
       79,   22,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   27,   79,   79,   79,   79,   79,   79,   79,   79,

       58,   79,   79,   79,   78,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   61,   79,   79,   79,   79,
       10,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   14,   79,   79,   79,   79,
       26,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   51,    9,   78,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   52,   79,    4,
       79,    3,   79,   79,   79,   79,   79,   79,   79,   54,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,

       79,   55,   79,   79,   79,   79,   79,   79,   78,   79,
       79,   56,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   62,   79,   79,   79,    7,   79,
       79,   79,   79,   79,   79,   79,   79,   60,    2,   79,
       79,   12,   21,   79,   79,   79,   79,   79,   79,   79,
       25,   63,   79,   79,   78,   79,   79,   79,   13,   79,
       79,   79,    6,   79,   79,   79,   44,   59,   79,    5,
       79,   79,   79,   79,   79,   79,   79,   29,   79,   39,
       79,   79,   20,   79,   79,   79,   79,   79,   79,   79,
       47,   77,   77,   79,   79,   79,   79,   79,   79,   79,

       79,   79,   79,   79,   79,   50,   79,   79,   79,   32,
       79,   79,   64,   16,   11,    8,   79,   79,   79,   79,
       79,   79,   19,   79,   79,   79,   79,   30,   79,   79,
       79,   79,   79,   79,   79,   15,   79,   79,   79,   49,
       46,   79,   31,   38,   48,   79,   79,   79,    0,   79,
       79,   79,   79,   79,   79,   79,   40,   79,   53,   79,
       79,    0,    0,   79,   79,   23,   79,   79,   79,   35,
       79,   79,   24,    0,    0,   79,   36,   45,   42,   79,
       79,   79,    0,    0,   79,   79,   79,   79,   79,    0,
       28,   79,   41,   34,   33,   79,    0,   79,   79,    0,

       79,   37,    0,   79,    0,   17,    0,   43,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    1,    1,    1,    1,    1,    5,
        6,    7,    8,    1,    9,   10,    1,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,    1,    1,   12,
        1,   13,    1,   14,   15,   16,   17,   18,   19,   16,
       16,   16,   16,   16,   16,   16,   20,   16,   21,   16,
       22,   23,   16,   24,   16,   16,   16,   16,   16,   16,
       25,    1,   26,    1,   27,    1,   28,   29,   30,   31,

       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   54,    1,   55,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[56] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    1,    1,    1,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    1,    1,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    1,    1
    } ;

static const flex_int16_t yy_base[514] =
    {   0,
        0,    0,  261, 2397,   54,   57, 2397, 2397, 2397,  248,
      246,   52,  241, 2397,   54, 2397, 2397,   55,   56,   57,
       59,   79,   82,   85,   93,   96,  104,  107,  121,  108,
      127,  133,  144,  147,  148,  158,  159,  170, 2397, 2397,
       76,  241, 2397,  229,  131,  190,  230,  227,  182,  193,
       83,  195,  196,   94,  199,  201,  214,  218,  219,  231,
      237,  233,  241,  255,  256,  266,  267,  278,  279,  280,
      281,  291,  293,  299,  304,  318,  324,  326,  332,  343,
      345,  347,  349,  355,  368,  370,  372,  374,  373,  387,
      393,  395,  398,  222,   97,  223,  220,  218,  401,  153,

      413,  156,  424,  425,  426,  427,  428,  438,  439,  452,
      457,  460,  463,  475,  477,  478,  489,  490,  503,  513,
      514,  515,  516,  517,  527,  538,  540,  542,  541,  546,
      561,  564,  574,  575,  586,  576,  587,  589,  597,  600,
      612,  620,  623,  625,  626,  644,  646,  648, 2397, 2397,
      649,  652,  663,  671,  673,  674,  686,  688,  691,  694,
      699,  705,  711,  713,  716,  717,  731,  743,  739,  754,
      758,  762,  764,  776,  772,  784,  787,  795,  799,  801,
      805,  807,  818,  820,  824,  826,  837,  843,  845,  849,
      855,  860,  866,  868,  872,  874,  880,  891,  892,  894,

      904,  914,  915,  918,  928,  933,  938,  943,  948,  951,
      956,  962,  970,  973,  984,  985,  990,  995,  996, 1009,
     1021, 1022, 1023, 1026, 1024, 1043, 1044, 1048, 1049, 1061,
     1066, 1067, 1069, 1080, 1086, 1090, 1092, 1098, 1111, 1117,
     1121, 1115, 1125, 1135, 1138, 1139, 1140, 1152, 1162, 1165,
     1166, 1170, 1180, 1188, 1190, 1191, 1192, 1194, 1205, 1213,
     1215, 1232, 1217, 1227, 1237, 1240, 1242, 1254, 1252, 1255,
     1265, 1260, 1279, 1283, 1293, 1285, 1297, 1298, 1310, 1311,
     1312, 1324, 1329, 1334, 1335, 1339, 1347, 1361, 1349, 1362,
     1372, 1366, 1383, 1384, 1389, 1394, 1395, 1397, 1407, 1412,

     1418, 1422, 1426, 1432, 1445, 1446, 1450, 1456, 1464, 1468,
     1469, 1470, 1488, 1482, 1487, 1502, 1510, 1512, 1513, 1514,
     1515, 1525, 1535, 1537, 1538, 1557, 1558, 1559, 1560, 1561,
     1563, 1571, 1581, 1583, 1585, 1591, 1595, 1605, 1608, 1609,
     1620, 1623, 1626, 1628, 1631, 1643, 1646, 1648, 1649, 1666,
     1671, 1672, 1674, 1676, 1686, 1696, 1697, 1698, 1699, 1709,
     1719, 1720, 1721, 1723, 1724, 1734, 1744, 1746, 1747, 1748,
     1758, 1761, 1766, 1769, 1772, 1784, 1787, 1792, 1795, 1798,
     1806, 1810, 1812, 1820, 1824, 1830, 1832, 1834, 1842, 1845,
     1856, 1857, 1859, 1869, 1874, 1877, 1880, 1879, 1882, 1892,

     1903, 1905, 1909, 1915, 1920, 1933, 1934, 1937, 1938, 1939,
     1951, 1956, 1957, 1959, 1962, 1976, 1977, 1981, 1989, 1991,
     1994, 1995, 1999, 2012, 2009, 2027, 2029, 2032, 2035, 2040,
     2061, 2058, 2046, 2063, 2069, 2075, 2080, 2086, 2090, 2092,
     2100, 2111, 2103, 2114, 2115, 2125, 2126, 2129,   46, 2137,
     2143, 2151, 2154, 2157, 2162, 2175, 2176, 2179, 2180, 2194,
     2198,  186,  174, 2200, 2202, 2204, 2206, 2223, 2226, 2227,
     2238, 2241, 2244,  172,  169, 2252, 2255, 2258, 2269, 2272,
     2277, 2280,  170,  150, 2283, 2291, 2295, 2297, 2305,  132,
     2397, 2309, 2315, 2323, 2326, 2329,  121, 2337, 2340,  115,

     2343, 2351,  105, 2355,  110, 2357,  101, 2397, 2397,  125,
      111,   86,   74
    } ;

static const flex_int16_t yy_def[514] =
    {   0,
      509,    1,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  510,  509,  509,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  510,  510,
      512,  511,  511,  513,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  509,  509,  509,  509,  509,  510,  512,

      511,  513,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  509,  509,
      510,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,

      511,  511,  511,  511,  510,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  510,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,

      511,  511,  511,  511,  511,  511,  511,  511,  510,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  510,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  510,  511,  511,  511,  511,  511,  511,  511,  511,

      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  509,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  509,  509,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  509,  509,  511,  511,  511,  511,  511,
      511,  511,  509,  509,  511,  511,  511,  511,  511,  509,
      509,  511,  511,  511,  511,  511,  509,  511,  511,  509,

      511,  511,  509,  511,  509,  511,  509,  509,    0,  509,
      509,  509,  509
    } ;

static const flex_int16_t yy_nxt[2453] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,    4,   10,   11,
       12,   13,    4,   14,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   16,   17,    4,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   27,   29,
       30,   31,   32,   33,   34,   35,   36,   27,   37,   38,
       27,   27,   27,   39,   40,   41,   41,   41,   41,   41,
       41,   44,   45,  462,   48,   48,   48,   48,  463,   48,
       46,   50,   53,   53,   53,  102,   53,   41,   41,   41,
       51,   54,   54,   54,   58,   54,   62,  100,   55,   48,
       63,   59,   48,   48,   64,   48,   53,   56,   60,   53,

       57,   61,   53,   48,   48,   54,   48,   95,   54,   51,
       53,   54,   52,   53,   48,   46,   68,   48,   48,   54,
       54,   53,   54,   67,   53,   53,   49,   65,   69,   66,
       54,   48,  508,   54,   54,   70,   71,   48,   53,  507,
       44,   45,   72,   48,   53,  505,  503,   54,   73,   46,
       53,  500,   74,   54,   48,   77,   75,   48,   48,   54,
       79,   53,   76,   48,   53,   53,   48,   80,   48,   48,
       54,   78,  497,   54,   54,   53,   53,   81,   83,   51,
       48,  491,   54,   85,   54,   54,   92,   53,   84,   89,
       86,   82,   48,   90,   87,   88,   54,   96,   96,   50,

       97,  490,   91,   48,   93,   48,   48,  484,   51,   48,
       50,   48,   53,   53,  483,  475,   53,  474,   53,   51,
       99,   54,   54,  101,   48,   54,  150,   54,   48,   48,
       97,   53,  103,   97,  149,   53,   53,   48,   98,   95,
       54,   48,  104,   48,   54,   54,  107,   48,   53,  105,
       53,   48,   94,   47,   53,   43,   42,   54,   53,   54,
      509,  509,  509,   54,  106,   48,   48,   54,  111,  108,
      109,  110,   53,   53,  509,  509,   48,   48,  509,  112,
      509,   54,   54,   53,   53,  113,  509,  115,   48,   48,
       48,   48,   54,   54,  509,   53,   53,   53,   53,  509,

      114,   48,  509,   48,   54,   54,   54,   54,   53,   48,
       53,  117,  116,  509,   48,  121,   53,   54,  118,   54,
      509,   53,  120,  509,  119,   54,  122,  123,   48,  127,
       54,  124,  509,  125,   48,   53,   48,  509,  128,  126,
      509,   53,   48,   53,   54,  509,  509,  509,  130,   53,
       54,  509,   54,   48,  129,   48,  132,   48,   54,   48,
       53,  133,   53,  131,   53,   48,   53,  509,  509,   54,
      135,   54,   53,   54,  137,   54,  134,  509,   48,  138,
       48,   54,   48,   48,   48,   53,  136,   53,  509,   53,
       53,   53,  509,  139,   54,  509,   54,   48,   54,   54,

       54,  141,  143,   48,   53,   48,  509,  509,   48,  509,
       53,   48,   53,   54,  140,   53,  142,  144,   50,   54,
      509,   54,  509,   48,   54,  509,  145,   51,  146,  148,
       53,  509,  509,  147,   48,   48,   48,   48,   48,   54,
      509,   53,   53,   53,   53,   53,  509,  151,   48,   48,
       54,   54,   54,   54,   54,   53,   53,  509,  156,  152,
      509,  509,   48,  154,   54,   54,  155,   48,  153,   53,
       48,  509,  157,   48,   53,  509,  158,   53,   54,  509,
       53,  159,  509,   54,  161,   48,   54,   48,   48,   54,
      509,  162,   53,  509,   53,   53,  509,  160,  163,   48,

       48,   54,  509,   54,   54,  509,   53,   53,  509,  166,
      509,  164,  509,   48,  509,   54,   54,  165,  509,  509,
       53,  169,  167,   48,   48,   48,   48,   48,  168,   54,
       53,   53,   53,   53,   53,  170,  509,   48,  509,   54,
       54,   54,   54,   54,   53,  173,  509,  176,   48,  171,
       48,   48,   48,   54,  172,   53,   48,   53,   53,   53,
      175,  174,  177,   53,   54,  509,   54,   54,   54,  178,
      180,   48,   54,  509,   48,  179,  181,  182,   53,  509,
      509,   53,  509,  509,   48,   48,   48,   54,  509,  183,
       54,   53,   53,   53,  509,  184,   48,   48,  509,   48,

       54,   54,   54,   53,   53,  188,   53,   48,  509,  509,
       48,  185,   54,   54,   53,   54,  509,   53,  509,  509,
      191,  186,   48,   54,  509,  189,   54,  190,  192,   53,
       48,  187,  509,   48,  509,   48,   48,   53,   54,  196,
       53,  194,   53,   53,  197,  509,   54,  193,  509,   54,
      509,   54,   54,  509,   48,  195,   48,  201,   48,   48,
      198,   53,   48,   53,  200,   53,   50,  509,  199,   53,
       54,  509,   54,   48,   54,   51,  205,  202,   54,  206,
       53,   48,  509,   48,   48,  509,  509,  509,   53,   54,
       53,   53,  204,  203,  207,  509,   48,   54,   48,   54,

       54,   48,  208,   53,   48,   53,  209,  210,   53,   48,
      509,   53,   54,  211,   54,   48,   53,   54,  213,  212,
       54,   48,   53,   48,  509,   54,   48,   48,   53,  214,
       53,   54,  215,   53,   53,  509,  509,   54,  509,   54,
      216,   48,   54,   54,  509,  217,  509,  509,   53,   48,
      509,  218,  509,   48,  220,  509,   53,   54,  509,  219,
       53,  222,  221,  509,   48,   54,  223,  509,   48,   54,
      224,   53,   48,  509,   48,   53,  509,  509,  509,   53,
       54,   53,   48,  225,   54,  226,   48,  509,   54,   53,
       54,  509,  509,   53,   48,  509,  509,   48,   54,  227,

      509,   53,   54,  230,   53,   48,  228,  231,  229,   48,
       54,   48,   53,   54,  509,   48,   53,   48,   53,  232,
      509,   54,   53,  509,   53,   54,  234,   54,   48,  509,
       48,   54,  235,   54,   48,   53,   48,   53,  509,  233,
      509,   53,  509,   53,   54,  236,   54,   48,  509,  237,
       54,  239,   54,   48,   53,   48,  509,  509,  509,   48,
       53,  240,   53,   54,  238,   48,   53,  509,  241,   54,
       48,   54,   53,  509,  242,   54,   48,   53,   48,  246,
      243,   54,   48,   53,   48,   53,   54,  245,  509,   53,
       48,   53,   54,  247,   54,  244,  509,   53,   54,  509,

       54,   48,   48,  248,   48,  509,   54,  509,   53,   53,
      509,   53,  249,  509,   48,  250,  509,   54,   54,  509,
       54,   53,  509,  253,   48,   48,  252,  251,   48,  254,
       54,   53,   53,  509,  509,   53,  509,  509,   48,  509,
       54,   54,  509,   48,   54,   50,  256,  255,   48,  257,
       53,  258,  509,   48,   51,   53,  259,  509,   48,   54,
       53,   48,  509,  509,   54,   53,   48,  509,   53,   54,
      261,  260,   48,   53,   54,  509,  509,   54,  509,   53,
       48,  509,   54,   48,  509,  264,  509,   53,   54,  509,
       53,  265,  263,  262,   48,   48,   54,  509,  509,   54,

       48,   53,   53,  509,  267,   48,   48,   53,  509,  509,
       54,   54,   53,   53,  266,  509,   54,  509,  509,   48,
      270,   54,   54,  273,  268,  271,   53,  274,  509,  269,
      272,   48,   48,   48,   48,   54,   48,  509,   53,   53,
       53,   53,  509,   53,  275,  509,  509,   54,   54,   54,
       54,  279,   54,   48,   48,  509,  509,  509,   48,   48,
       53,   53,  276,  277,  278,   53,   53,  509,  509,   54,
       54,   48,  509,  509,   54,   54,   48,   48,   53,   48,
      283,  509,  509,   53,   53,  509,   53,   54,  281,  280,
       48,  509,   54,   54,  282,   54,   48,   53,  286,  509,

       48,  284,   48,   53,  287,  509,   54,   53,   48,   53,
      509,  285,   54,  509,  509,   53,   54,  509,   54,  509,
      509,   48,  509,  509,   54,   48,  288,   48,   53,  291,
      289,   48,   53,  509,   53,   48,  290,   54,   53,  509,
      294,   54,   53,   54,  292,   48,  293,   54,   48,   48,
       48,   54,   53,  509,  509,   53,   53,   53,  509,  509,
      295,   54,   48,  509,   54,   54,   54,  509,  509,   53,
      297,  296,   48,  298,  299,   48,   48,  509,   54,   53,
       48,  509,   53,   53,  301,  509,  300,   53,   54,  509,
       48,   54,   54,  304,  509,  302,   54,   53,   48,  509,

       48,   48,   48,  303,   48,   53,   54,   53,   53,   53,
      305,   50,  509,  509,   54,   48,   54,   54,   54,  509,
       51,  308,   53,   48,  509,   48,  306,   48,  307,  509,
       53,   54,   53,  509,   53,  509,  509,   48,  509,   54,
      311,   54,   48,   54,   53,  309,  313,   48,  509,   53,
       48,  509,   48,   54,   53,  312,  310,   53,   54,   53,
      509,  314,   48,   54,   48,   48,   54,  317,   54,   53,
       48,   53,   53,  315,  509,   48,  509,   53,   54,  509,
       54,   54,   53,  316,  509,  319,   54,  320,  318,   48,
      509,   54,  509,   48,  509,   48,   53,  509,  509,  323,

       53,  321,   53,   48,  509,   54,  322,   48,   48,   54,
       53,   54,  327,  325,   53,   53,  509,  509,  509,   54,
       48,   48,   48,   54,   54,  324,  509,   53,   53,   53,
      509,  509,  509,  326,   48,  509,   54,   54,   54,   48,
      509,   53,  328,  509,   48,   48,   53,  330,  329,   48,
       54,   53,   53,  509,  509,   54,   53,   48,  509,   48,
       54,   54,  509,  509,   53,   54,   53,  509,  509,  331,
      333,   48,   48,   54,  335,   54,   48,  509,   53,   53,
      332,  509,   48,   53,  334,  509,  509,   54,   54,   53,
      337,  509,   54,   48,   48,  509,  336,  339,   54,   48,

       53,   53,  338,  509,   48,   48,   53,   48,  509,   54,
       54,   53,   53,  509,   53,   54,  509,   48,  340,  341,
       54,   54,   48,   54,   53,  509,  509,  509,   48,   53,
      509,  509,   48,   54,  342,   53,   48,  345,   54,   53,
      509,  344,   48,   53,   54,  343,  509,  347,   54,   53,
      509,  509,   54,  348,  509,   48,   48,  346,   54,  509,
       48,  509,   53,   53,  349,  509,   48,   53,  509,  509,
      350,   54,   54,   53,   48,  351,   54,  353,   48,   48,
       48,   50,   54,  509,  509,   53,   53,   53,  509,  509,
       51,  352,   48,  509,   54,   54,   54,   48,   48,   53,

      354,  509,  509,  509,   53,   53,  355,  509,   54,  509,
      356,  509,   48,   54,   54,  357,  358,  509,  360,   53,
       48,  509,   48,   48,   48,   48,  509,   53,   54,   53,
       53,   53,   53,  359,  509,   48,   54,  361,   54,   54,
       54,   54,   53,  363,  509,   48,  509,   48,   48,  509,
      509,   54,   53,  364,   53,   53,  362,  509,  509,  509,
      365,   54,  366,   54,   54,  367,  368,   48,   48,   48,
       48,   48,  369,   48,   53,   53,   53,   53,   53,  509,
       53,   48,  509,   54,   54,   54,   54,   54,   53,   54,
      373,   48,  374,   48,  372,   48,  371,   54,   53,  509,

       53,   48,   53,  370,  509,   48,  375,   54,   53,   54,
      376,   54,   53,  509,  509,   48,  509,   54,   48,   48,
      509,   54,   53,  378,  509,   53,   53,  380,  509,  377,
       48,   54,  379,   48,   54,   54,   48,   53,   48,  509,
       53,   48,  509,   53,  509,   53,   54,  509,   53,   54,
      509,  381,   54,   48,   54,  509,   48,   54,   48,   48,
       53,  509,  384,   53,  509,   53,   53,  509,  509,   54,
      382,  509,   54,  509,   54,   54,   48,  387,  385,  383,
      388,   48,   48,   53,   48,  509,   48,  386,   53,   53,
      509,   53,   54,   53,  509,  509,   48,   54,   54,  509,

       54,  389,   54,   50,  509,  509,   48,   48,   48,   48,
      509,  509,   51,   53,   53,   53,   53,  392,  509,   48,
      390,  391,   54,   54,   54,   54,   53,  393,  509,   48,
       48,   48,  394,   48,   48,   54,   53,   53,   53,  395,
       53,   53,  509,  509,   48,   54,   54,   54,  509,   54,
       54,   53,  509,  396,   48,  398,   48,   48,   48,  400,
       54,   53,  509,   53,   53,   53,  509,  397,   48,  399,
       54,   48,   54,   54,   54,  403,   48,  509,   53,   48,
      401,  509,   48,   53,   54,  509,   53,   54,  402,   53,
      404,  509,   54,  405,   48,   54,  509,   48,   54,  407,

      406,   53,   48,  408,   53,   48,  509,  509,   48,   53,
       54,  509,   53,   54,  409,   53,   48,  509,   54,  509,
       48,   54,   48,   53,   54,  509,  509,   53,  509,   53,
       48,  509,   54,  411,   48,  410,   54,   53,   54,  509,
       48,   53,   48,  509,   48,  412,   54,   53,  509,   53,
       54,   53,   48,  509,  509,   48,   54,  509,   54,   53,
       54,  509,   53,  417,  414,  413,   48,   48,   54,   48,
      415,   54,  509,   53,   50,  509,   53,  416,  509,   48,
      419,  509,   54,   51,   48,   54,   53,   48,  418,   48,
       48,   53,   48,  509,   53,   54,   53,   53,  509,   53,

       54,  509,   48,   54,  509,   54,   54,  509,   54,   53,
      420,  423,  422,   48,  509,   48,  509,  509,   54,   48,
       53,  421,   53,  425,  509,   48,   53,  424,  509,   54,
       48,   54,   53,  426,  430,   54,  101,   53,  427,  509,
      429,   54,  509,   48,   48,  428,   54,   48,   48,   48,
       53,   53,  509,  509,   53,   53,   53,  509,  431,   54,
       54,   48,  509,   54,   54,   54,   48,   48,   53,   48,
      509,  509,   48,   53,   53,  509,   53,   54,  433,   53,
      432,  509,   54,   54,  434,   54,   48,   48,   54,  509,
      509,   48,  509,   53,   53,  509,  436,  435,   53,   48,

      509,   48,   54,   54,   48,   48,   53,   54,   53,   48,
      509,   53,   53,  509,  509,   54,   53,   54,  509,   48,
       54,   54,   48,  437,  509,   54,   53,  509,  509,   53,
      439,  440,  438,  509,  509,   54,  509,   48,   54,   48,
      441,  444,   48,  443,   53,   48,   53,  442,  509,   53,
       48,  509,   53,   54,  509,   54,   48,   53,   54,  509,
      509,   54,  509,   53,  449,  509,   54,  445,   48,  509,
      446,   48,   54,   48,  509,   53,  452,  447,   53,   48,
       53,  448,  509,  450,   54,   48,   53,   54,  509,   54,
       48,  509,   53,  451,  509,   54,   48,   53,  453,  509,

       48,   54,   48,   53,  454,  509,   54,   53,  509,   53,
       48,  509,   54,   48,  509,  455,   54,   53,   54,  509,
       53,   48,  509,  509,   48,   48,   54,  456,   53,   54,
      457,   53,   53,  509,  509,   48,   48,   54,  458,   48,
       54,   54,   53,   53,  509,  509,   53,   48,  509,  509,
      509,   54,   54,   48,   53,   54,  509,  460,  509,  461,
       53,   48,  509,   54,   48,  459,  509,   48,   53,   54,
      509,   53,   48,  509,   53,  509,  509,   54,  464,   53,
       54,  509,  466,   54,  465,   48,   48,  509,   54,   48,
       48,  509,   53,   53,  509,  467,   53,   53,  468,  509,

      509,   54,   54,  469,   48,   54,   54,  470,   48,  509,
       48,   53,   48,  509,   48,   53,   48,   53,  509,   53,
       54,   53,  509,   53,   54,  471,   54,  509,   54,  473,
       54,  509,   54,   48,  472,  509,   48,   48,  476,  509,
       53,  509,  477,   53,   53,  509,  478,  509,   48,   54,
      509,   48,   54,   54,   48,   53,  509,  509,   53,  509,
      509,   53,   48,  479,   54,   48,  480,   54,   48,   53,
       54,  482,   53,  481,  509,   53,  509,  509,   54,   48,
      509,   54,   48,  485,   54,  509,   53,   48,  509,   53,
       48,  509,  487,   48,   53,   54,  486,   53,   54,  509,

       53,   48,  492,   54,  509,   48,   54,   48,   53,   54,
      509,  489,   53,  509,   53,   48,  509,   54,  488,   48,
      509,   54,   53,   54,  509,   48,   53,  494,  509,  493,
      509,   54,   53,   48,  509,   54,   48,  495,  509,   48,
       53,   54,  509,   53,  498,  496,   53,   48,  509,   54,
       48,  509,   54,   48,   53,   54,  509,   53,  499,  509,
       53,   48,  509,   54,  509,   48,   54,   48,   53,   54,
      509,  502,   53,  509,   53,  509,  509,   54,  504,  509,
      509,   54,  509,   54,  509,  509,  509,  501,  509,  509,
      509,  509,  509,  509,  509,  506,    3,  509,  509,  509,

      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509
    } ;

static const flex_int16_t yy_chk[2453] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    5,    5,    5,    6,    6,
        6,   12,   12,  449,   15,   18,   19,   20,  449,   21,
       12,   15,   18,   19,   20,  513,   21,   41,   41,   41,
       15,   18,   19,   20,   20,   21,   21,  512,   18,   22,
       21,   20,   23,   51,   21,   24,   22,   19,   20,   23,

       19,   20,   24,   25,   54,   22,   26,   95,   23,   51,
       25,   24,  511,   26,   27,   95,   24,   28,   30,   25,
       54,   27,   26,   23,   28,   30,  510,   22,   25,   22,
       27,   29,  507,   28,   30,   26,   26,   31,   29,  505,
       45,   45,   28,   32,   31,  503,  500,   29,   29,   45,
       32,  497,   29,   31,   33,   30,   29,   34,   35,   32,
       32,   33,   29,  100,   34,   35,  102,   32,   36,   37,
       33,   31,  490,   34,   35,   36,   37,   32,   34,  100,
       38,  484,  102,   35,   36,   37,   37,   38,   34,   36,
       35,   33,   49,   36,   35,   35,   38,   46,   46,   49,

       46,  483,   36,   50,   38,   52,   53,  475,   49,   55,
       50,   56,   52,   53,  474,  463,   55,  462,   56,   50,
       50,   52,   53,   53,   57,   55,   98,   56,   58,   59,
       97,   57,   55,   96,   94,   58,   59,   48,   47,   44,
       57,   60,   56,   62,   58,   59,   59,   61,   60,   57,
       62,   63,   42,   13,   61,   11,   10,   60,   63,   62,
        3,    0,    0,   61,   58,   64,   65,   63,   61,   60,
       60,   60,   64,   65,    0,    0,   66,   67,    0,   62,
        0,   64,   65,   66,   67,   63,    0,   65,   68,   69,
       70,   71,   66,   67,    0,   68,   69,   70,   71,    0,

       64,   72,    0,   73,   68,   69,   70,   71,   72,   74,
       73,   67,   66,    0,   75,   71,   74,   72,   68,   73,
        0,   75,   70,    0,   69,   74,   71,   71,   76,   74,
       75,   72,    0,   73,   77,   76,   78,    0,   74,   73,
        0,   77,   79,   78,   76,    0,    0,    0,   76,   79,
       77,    0,   78,   80,   75,   81,   78,   82,   79,   83,
       80,   79,   81,   77,   82,   84,   83,    0,    0,   80,
       80,   81,   84,   82,   82,   83,   79,    0,   85,   83,
       86,   84,   87,   89,   88,   85,   81,   86,    0,   87,
       89,   88,    0,   84,   85,    0,   86,   90,   87,   89,

       88,   86,   88,   91,   90,   92,    0,    0,   93,    0,
       91,   99,   92,   90,   85,   93,   87,   89,   99,   91,
        0,   92,    0,  101,   93,    0,   90,   99,   91,   93,
      101,    0,    0,   92,  103,  104,  105,  106,  107,  101,
        0,  103,  104,  105,  106,  107,    0,   99,  108,  109,
      103,  104,  105,  106,  107,  108,  109,    0,  106,  101,
        0,    0,  110,  104,  108,  109,  105,  111,  103,  110,
      112,    0,  107,  113,  111,    0,  108,  112,  110,    0,
      113,  109,    0,  111,  111,  114,  112,  115,  116,  113,
        0,  112,  114,    0,  115,  116,    0,  110,  113,  117,

      118,  114,    0,  115,  116,    0,  117,  118,    0,  116,
        0,  114,    0,  119,    0,  117,  118,  115,    0,    0,
      119,  118,  116,  120,  121,  122,  123,  124,  117,  119,
      120,  121,  122,  123,  124,  118,    0,  125,    0,  120,
      121,  122,  123,  124,  125,  121,    0,  124,  126,  119,
      127,  129,  128,  125,  120,  126,  130,  127,  129,  128,
      123,  122,  125,  130,  126,    0,  127,  129,  128,  126,
      128,  131,  130,    0,  132,  127,  129,  130,  131,    0,
        0,  132,    0,    0,  133,  134,  136,  131,    0,  131,
      132,  133,  134,  136,    0,  132,  135,  137,    0,  138,

      133,  134,  136,  135,  137,  136,  138,  139,    0,    0,
      140,  133,  135,  137,  139,  138,    0,  140,    0,    0,
      138,  134,  141,  139,    0,  137,  140,  137,  139,  141,
      142,  135,    0,  143,    0,  144,  145,  142,  141,  143,
      143,  141,  144,  145,  143,    0,  142,  140,    0,  143,
        0,  144,  145,    0,  146,  142,  147,  145,  148,  151,
      143,  146,  152,  147,  144,  148,  151,    0,  143,  152,
      146,    0,  147,  153,  148,  151,  151,  146,  152,  152,
      153,  154,    0,  155,  156,    0,    0,    0,  154,  153,
      155,  156,  148,  147,  153,    0,  157,  154,  158,  155,

      156,  159,  154,  157,  160,  158,  155,  156,  159,  161,
        0,  160,  157,  157,  158,  162,  161,  159,  159,  158,
      160,  163,  162,  164,    0,  161,  165,  166,  163,  159,
      164,  162,  159,  165,  166,    0,    0,  163,    0,  164,
      160,  167,  165,  166,    0,  161,    0,    0,  167,  169,
        0,  162,    0,  168,  164,    0,  169,  167,    0,  163,
      168,  166,  165,    0,  170,  169,  167,    0,  171,  168,
      168,  170,  172,    0,  173,  171,    0,    0,    0,  172,
      170,  173,  175,  169,  171,  170,  174,    0,  172,  175,
      173,    0,    0,  174,  176,    0,    0,  177,  175,  171,

        0,  176,  174,  174,  177,  178,  172,  175,  173,  179,
      176,  180,  178,  177,    0,  181,  179,  182,  180,  177,
        0,  178,  181,    0,  182,  179,  179,  180,  183,    0,
      184,  181,  180,  182,  185,  183,  186,  184,    0,  178,
        0,  185,    0,  186,  183,  181,  184,  187,    0,  183,
      185,  185,  186,  188,  187,  189,    0,    0,    0,  190,
      188,  186,  189,  187,  184,  191,  190,    0,  187,  188,
      192,  189,  191,    0,  188,  190,  193,  192,  194,  192,
      189,  191,  195,  193,  196,  194,  192,  191,    0,  195,
      197,  196,  193,  193,  194,  190,    0,  197,  195,    0,

      196,  198,  199,  194,  200,    0,  197,    0,  198,  199,
        0,  200,  195,    0,  201,  196,    0,  198,  199,    0,
      200,  201,    0,  199,  202,  203,  198,  197,  204,  200,
      201,  202,  203,    0,    0,  204,    0,    0,  205,    0,
      202,  203,    0,  206,  204,  205,  203,  202,  207,  204,
      206,  205,    0,  208,  205,  207,  206,    0,  209,  206,
      208,  210,    0,    0,  207,  209,  211,    0,  210,  208,
      208,  207,  212,  211,  209,    0,    0,  210,    0,  212,
      213,    0,  211,  214,    0,  211,    0,  213,  212,    0,
      214,  212,  210,  209,  215,  216,  213,    0,    0,  214,

      217,  215,  216,    0,  214,  218,  219,  217,    0,    0,
      215,  216,  218,  219,  213,    0,  217,    0,    0,  220,
      216,  218,  219,  219,  215,  217,  220,  219,    0,  215,
      218,  221,  222,  223,  225,  220,  224,    0,  221,  222,
      223,  225,    0,  224,  220,    0,    0,  221,  222,  223,
      225,  225,  224,  226,  227,    0,    0,    0,  228,  229,
      226,  227,  222,  223,  224,  228,  229,    0,    0,  226,
      227,  230,    0,    0,  228,  229,  231,  232,  230,  233,
      229,    0,    0,  231,  232,    0,  233,  230,  227,  226,
      234,    0,  231,  232,  228,  233,  235,  234,  232,    0,

      236,  230,  237,  235,  233,    0,  234,  236,  238,  237,
        0,  231,  235,    0,    0,  238,  236,    0,  237,    0,
        0,  239,    0,    0,  238,  242,  234,  240,  239,  238,
      235,  241,  242,    0,  240,  243,  237,  239,  241,    0,
      241,  242,  243,  240,  239,  244,  240,  241,  245,  246,
      247,  243,  244,    0,    0,  245,  246,  247,    0,    0,
      242,  244,  248,    0,  245,  246,  247,    0,    0,  248,
      244,  243,  249,  245,  246,  250,  251,    0,  248,  249,
      252,    0,  250,  251,  248,    0,  247,  252,  249,    0,
      253,  250,  251,  251,    0,  249,  252,  253,  254,    0,

      255,  256,  257,  250,  258,  254,  253,  255,  256,  257,
      252,  258,    0,    0,  254,  259,  255,  256,  257,    0,
      258,  255,  259,  260,    0,  261,  253,  263,  254,    0,
      260,  259,  261,    0,  263,    0,    0,  264,    0,  260,
      260,  261,  262,  263,  264,  258,  262,  265,    0,  262,
      266,    0,  267,  264,  265,  261,  259,  266,  262,  267,
        0,  263,  269,  265,  268,  270,  266,  266,  267,  269,
      272,  268,  270,  264,    0,  271,    0,  272,  269,    0,
      268,  270,  271,  265,    0,  268,  272,  269,  267,  273,
        0,  271,    0,  274,    0,  276,  273,    0,    0,  272,

      274,  270,  276,  275,    0,  273,  271,  277,  278,  274,
      275,  276,  276,  274,  277,  278,    0,    0,    0,  275,
      279,  280,  281,  277,  278,  273,    0,  279,  280,  281,
        0,    0,    0,  275,  282,    0,  279,  280,  281,  283,
        0,  282,  277,    0,  284,  285,  283,  281,  279,  286,
      282,  284,  285,    0,    0,  283,  286,  287,    0,  289,
      284,  285,    0,    0,  287,  286,  289,    0,    0,  283,
      285,  288,  290,  287,  287,  289,  292,    0,  288,  290,
      284,    0,  291,  292,  286,    0,    0,  288,  290,  291,
      289,    0,  292,  293,  294,    0,  288,  292,  291,  295,

      293,  294,  291,    0,  296,  297,  295,  298,    0,  293,
      294,  296,  297,    0,  298,  295,    0,  299,  293,  294,
      296,  297,  300,  298,  299,    0,    0,    0,  301,  300,
        0,    0,  302,  299,  295,  301,  303,  298,  300,  302,
        0,  297,  304,  303,  301,  296,    0,  300,  302,  304,
        0,    0,  303,  301,    0,  305,  306,  299,  304,    0,
      307,    0,  305,  306,  303,    0,  308,  307,    0,    0,
      304,  305,  306,  308,  309,  305,  307,  307,  310,  311,
      312,  309,  308,    0,    0,  310,  311,  312,    0,    0,
      309,  306,  314,    0,  310,  311,  312,  315,  313,  314,

      308,    0,    0,    0,  315,  313,  309,    0,  314,    0,
      310,    0,  316,  315,  313,  311,  313,    0,  315,  316,
      317,    0,  318,  319,  320,  321,    0,  317,  316,  318,
      319,  320,  321,  314,    0,  322,  317,  316,  318,  319,
      320,  321,  322,  318,    0,  323,    0,  324,  325,    0,
        0,  322,  323,  319,  324,  325,  317,    0,    0,    0,
      320,  323,  321,  324,  325,  322,  323,  326,  327,  328,
      329,  330,  324,  331,  326,  327,  328,  329,  330,    0,
      331,  332,    0,  326,  327,  328,  329,  330,  332,  331,
      330,  333,  331,  334,  328,  335,  327,  332,  333,    0,

      334,  336,  335,  326,    0,  337,  332,  333,  336,  334,
      333,  335,  337,    0,    0,  338,    0,  336,  339,  340,
        0,  337,  338,  335,    0,  339,  340,  337,    0,  334,
      341,  338,  336,  342,  339,  340,  343,  341,  344,    0,
      342,  345,    0,  343,    0,  344,  341,    0,  345,  342,
        0,  340,  343,  346,  344,    0,  347,  345,  348,  349,
      346,    0,  345,  347,    0,  348,  349,    0,    0,  346,
      341,    0,  347,    0,  348,  349,  350,  348,  346,  344,
      349,  351,  352,  350,  353,    0,  354,  347,  351,  352,
        0,  353,  350,  354,    0,    0,  355,  351,  352,    0,

      353,  350,  354,  355,    0,    0,  356,  357,  358,  359,
        0,    0,  355,  356,  357,  358,  359,  355,    0,  360,
      353,  354,  356,  357,  358,  359,  360,  356,    0,  361,
      362,  363,  357,  364,  365,  360,  361,  362,  363,  358,
      364,  365,    0,    0,  366,  361,  362,  363,    0,  364,
      365,  366,    0,  360,  367,  362,  368,  369,  370,  365,
      366,  367,    0,  368,  369,  370,    0,  361,  371,  364,
      367,  372,  368,  369,  370,  371,  373,    0,  372,  374,
      366,    0,  375,  373,  371,    0,  374,  372,  369,  375,
      372,    0,  373,  373,  376,  374,    0,  377,  375,  375,

      374,  376,  378,  376,  377,  379,    0,    0,  380,  378,
      376,    0,  379,  377,  377,  380,  381,    0,  378,    0,
      382,  379,  383,  381,  380,    0,    0,  382,    0,  383,
      384,    0,  381,  381,  385,  379,  382,  384,  383,    0,
      386,  385,  387,    0,  388,  382,  384,  386,    0,  387,
      385,  388,  389,    0,    0,  390,  386,    0,  387,  389,
      388,    0,  390,  388,  385,  384,  391,  392,  389,  393,
      386,  390,    0,  391,  392,    0,  393,  387,    0,  394,
      390,    0,  391,  392,  395,  393,  394,  396,  389,  398,
      397,  395,  399,    0,  396,  394,  398,  397,    0,  399,

      395,    0,  400,  396,    0,  398,  397,    0,  399,  400,
      394,  397,  396,  401,    0,  402,    0,    0,  400,  403,
      401,  395,  402,  399,    0,  404,  403,  398,    0,  401,
      405,  402,  404,  400,  404,  403,  403,  405,  401,    0,
      403,  404,    0,  406,  407,  402,  405,  408,  409,  410,
      406,  407,    0,    0,  408,  409,  410,    0,  405,  406,
      407,  411,    0,  408,  409,  410,  412,  413,  411,  414,
        0,    0,  415,  412,  413,    0,  414,  411,  408,  415,
      407,    0,  412,  413,  409,  414,  416,  417,  415,    0,
        0,  418,    0,  416,  417,    0,  412,  411,  418,  419,

        0,  420,  416,  417,  421,  422,  419,  418,  420,  423,
        0,  421,  422,    0,    0,  419,  423,  420,    0,  425,
      421,  422,  424,  417,    0,  423,  425,    0,    0,  424,
      419,  420,  418,    0,    0,  425,    0,  426,  424,  427,
      421,  425,  428,  424,  426,  429,  427,  422,    0,  428,
      430,    0,  429,  426,    0,  427,  433,  430,  428,    0,
        0,  429,    0,  433,  431,    0,  430,  426,  432,    0,
      427,  431,  433,  434,    0,  432,  433,  429,  431,  435,
      434,  430,    0,  431,  432,  436,  435,  431,    0,  434,
      437,    0,  436,  432,    0,  435,  438,  437,  434,    0,

      439,  436,  440,  438,  435,    0,  437,  439,    0,  440,
      441,    0,  438,  443,    0,  437,  439,  441,  440,    0,
      443,  442,    0,    0,  444,  445,  441,  438,  442,  443,
      439,  444,  445,    0,    0,  446,  447,  442,  442,  448,
      444,  445,  446,  447,    0,    0,  448,  450,    0,    0,
        0,  446,  447,  451,  450,  448,    0,  447,    0,  448,
      451,  452,    0,  450,  453,  446,    0,  454,  452,  451,
        0,  453,  455,    0,  454,    0,    0,  452,  450,  455,
      453,    0,  452,  454,  451,  456,  457,    0,  455,  458,
      459,    0,  456,  457,    0,  453,  458,  459,  454,    0,

        0,  456,  457,  455,  460,  458,  459,  456,  461,    0,
      464,  460,  465,    0,  466,  461,  467,  464,    0,  465,
      460,  466,    0,  467,  461,  458,  464,    0,  465,  461,
      466,    0,  467,  468,  460,    0,  469,  470,  464,    0,
      468,    0,  465,  469,  470,    0,  467,    0,  471,  468,
        0,  472,  469,  470,  473,  471,    0,    0,  472,    0,
        0,  473,  476,  468,  471,  477,  469,  472,  478,  476,
      473,  472,  477,  471,    0,  478,    0,    0,  476,  479,
        0,  477,  480,  476,  478,    0,  479,  481,    0,  480,
      482,    0,  480,  485,  481,  479,  479,  482,  480,    0,

      485,  486,  485,  481,    0,  487,  482,  488,  486,  485,
        0,  482,  487,    0,  488,  489,    0,  486,  481,  492,
        0,  487,  489,  488,    0,  493,  492,  487,    0,  486,
        0,  489,  493,  494,    0,  492,  495,  488,    0,  496,
      494,  493,    0,  495,  492,  489,  496,  498,    0,  494,
      499,    0,  495,  501,  498,  496,    0,  499,  496,    0,
      501,  502,    0,  498,    0,  504,  499,  506,  502,  501,
        0,  499,  504,    0,  506,    0,    0,  502,  501,    0,
        0,  504,    0,  506,    0,    0,    0,  498,    0,    0,
        0,    0,    0,    0,    0,  504,  509,  509,  509,  509,

      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[84] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lexer.l"
#line 2 "lexer.l"
/* Reconhecedor de uma linguagem simplificada */
#include <iostream>
#include "tokens.h"
using std::cout;

/* Variaveis globais para linha e coluna */
extern int yylineno;
int column = 1;

/* Função que atualiza a coluna */
void update_column(yyFlexLexer& scanner) {
    column += scanner.YYLeng();
}
#line 1149 "/home/tacioplays/Compiladores/TontoAnalyzer/Build/lex.yy.cc"
/* Definições Regulares */
/*string	{letras}({letras}|{digito})*  */
/* Nome da Classe */
/* Nome da Relação */
/* Nome da Instancia */
/* Nome Novos Tipos */
/* Regras de Tradução */
#line 1157 "/home/tacioplays/Compiladores/TontoAnalyzer/Build/lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 45 "lexer.l"

#line 1291 "/home/tacioplays/Compiladores/TontoAnalyzer/Build/lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 510 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2397 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 46 "lexer.l"
{ update_column(*this); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 48 "lexer.l"
{ update_column(*this); return T_PACKAGE; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 49 "lexer.l"
{ update_column(*this); return T_IMPORT; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 50 "lexer.l"
{ update_column(*this); return T_GENSET; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 51 "lexer.l"
{ update_column(*this); return T_DISJOINT; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 52 "lexer.l"
{ update_column(*this); return T_COMPLETE; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 53 "lexer.l"
{ update_column(*this); return T_GENERAL; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 54 "lexer.l"
{ update_column(*this); return T_SPECIFICS; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 55 "lexer.l"
{ update_column(*this); return T_WHERE; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 58 "lexer.l"
{ update_column(*this); return T_EVENT; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 59 "lexer.l"
{ update_column(*this); return T_SITUATION; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 60 "lexer.l"
{ update_column(*this); return T_PROCESS; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 61 "lexer.l"
{ update_column(*this); return T_CATEGORY; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 62 "lexer.l"
{ update_column(*this); return T_MIXIN; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 63 "lexer.l"
{ update_column(*this); return T_PHASEMIXIN; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 64 "lexer.l"
{ update_column(*this); return T_ROLEMIXIN; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 65 "lexer.l"
{ update_column(*this); return T_HISTORICALROLEMIXIN; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 66 "lexer.l"
{ update_column(*this); return T_KIND; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 67 "lexer.l"
{ update_column(*this); return T_COLLECTIVE; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 68 "lexer.l"
{ update_column(*this); return T_QUANTITY; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 69 "lexer.l"
{ update_column(*this); return T_QUALITY; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 70 "lexer.l"
{ update_column(*this); return T_MODE; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 71 "lexer.l"
{ update_column(*this); return T_INTRINSICMODE; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 72 "lexer.l"
{ update_column(*this); return T_EXTRINSICMODE; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 73 "lexer.l"
{ update_column(*this); return T_SUBKIND; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 74 "lexer.l"
{ update_column(*this); return T_PHASE; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 75 "lexer.l"
{ update_column(*this); return T_ROLE; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 76 "lexer.l"
{ update_column(*this); return T_HISTORICALROLE; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 79 "lexer.l"
{ update_column(*this); return T_MATERIAL; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 80 "lexer.l"
{ update_column(*this); return T_DERIVATION; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 81 "lexer.l"
{ update_column(*this); return T_COMPARATIVE; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 82 "lexer.l"
{ update_column(*this); return T_MEDIATION; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 83 "lexer.l"
{ update_column(*this); return T_CHARACTERIZATION; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 84 "lexer.l"
{ update_column(*this); return T_SUBCOLLECTIONOF; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 85 "lexer.l"
{ update_column(*this); return T_SUBQUALITYOF; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 86 "lexer.l"
{ update_column(*this); return T_INSTANTIATION; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 87 "lexer.l"
{ update_column(*this); return T_EXTERNALDEPENDENCE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 88 "lexer.l"
{ update_column(*this); return T_COMPONENTOF; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 89 "lexer.l"
{ update_column(*this); return T_MEMBEROF; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 90 "lexer.l"
{ update_column(*this); return T_TERMINATION; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 91 "lexer.l"
{ update_column(*this); return T_PARTICIPATIONAL; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 92 "lexer.l"
{ update_column(*this); return T_PARTICIPATION; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 93 "lexer.l"
{ update_column(*this); return T_HISTORICALDEPENDENCE; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 94 "lexer.l"
{ update_column(*this); return T_CREATION; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 95 "lexer.l"
{ update_column(*this); return T_MANIFESTATION; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 96 "lexer.l"
{ update_column(*this); return T_BRINGSABOUT; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 97 "lexer.l"
{ update_column(*this); return T_TRIGGERS; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 98 "lexer.l"
{ update_column(*this); return T_COMPOSITION; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 99 "lexer.l"
{ update_column(*this); return T_AGGREGATION; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 100 "lexer.l"
{ update_column(*this); return T_INHERENCE; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 101 "lexer.l"
{ update_column(*this); return T_VALUE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 102 "lexer.l"
{ update_column(*this); return T_FORMAL; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 103 "lexer.l"
{ update_column(*this); return T_CONSTITUTION; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 106 "lexer.l"
{ update_column(*this); return T_NUMBER_TYPE; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 107 "lexer.l"
{ update_column(*this); return T_STRING_TYPE; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 108 "lexer.l"
{ update_column(*this); return T_BOOLEAN_TYPE; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 109 "lexer.l"
{ update_column(*this); return T_DATE_TYPE; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 110 "lexer.l"
{ update_column(*this); return T_TIME_TYPE; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 111 "lexer.l"
{ update_column(*this); return T_DATETIME_TYPE; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 114 "lexer.l"
{ update_column(*this); return T_ORDERED; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 115 "lexer.l"
{ update_column(*this); return T_CONST; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 116 "lexer.l"
{ update_column(*this); return T_DERIVED; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 117 "lexer.l"
{ update_column(*this); return T_SUBSETS; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 118 "lexer.l"
{ update_column(*this); return T_REDEFINES; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 121 "lexer.l"
{ update_column(*this); return T_LBRACE; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 122 "lexer.l"
{ update_column(*this); return T_RBRACE; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 123 "lexer.l"
{ update_column(*this); return T_LPAREN; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 124 "lexer.l"
{ update_column(*this); return T_RPAREN; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 125 "lexer.l"
{ update_column(*this); return T_LBRACK; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 126 "lexer.l"
{ update_column(*this); return T_RBRACK; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 127 "lexer.l"
{ update_column(*this); return T_DOTDOT; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 128 "lexer.l"
{ update_column(*this); return T_DIAMOND_ARROW; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 129 "lexer.l"
{ update_column(*this); return T_ARROW_DIAMOND; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 130 "lexer.l"
{ update_column(*this); return T_ASTERISK; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 131 "lexer.l"
{ update_column(*this); return T_AT; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 132 "lexer.l"
{ update_column(*this); return T_DOT; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 135 "lexer.l"
{ update_column(*this); return T_NEW_DATA_TYPE; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 136 "lexer.l"
{ update_column(*this); return T_CLASS_NAME; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 137 "lexer.l"
{ update_column(*this); return T_RELATION_NAME; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 138 "lexer.l"
{ update_column(*this); return T_INSTANCE_NAME; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 139 "lexer.l"
{ update_column(*this); return T_NUMBER; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 142 "lexer.l"
{
                    // Imprime a mensagem de erro 
                    cout << "Erro na linha " << yylineno << ", coluna " << column
                         << ": Token inválido '" << YYText() << "'\n";
                    // Sugestão de tratamento
                    cout << "  Sugestão: Verifique se o caractere é permitido pela linguagem TONTO ou se há erro na formação de um nome (ex: classe iniciando com minúscula, violação de convenção de nome, caractere especial inesperado).\n";
                    update_column(*this); 
                    return T_INVALID; 
                }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 151 "lexer.l"
ECHO;
	YY_BREAK
#line 1782 "/home/tacioplays/Compiladores/TontoAnalyzer/Build/lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 510 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 510 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 509);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 151 "lexer.l"


/* nenhuma função auxiliar é necessária */

